-- Verifiable Elections Electronic Pollbook System (Digital Voter List)
-- Copyright (C) 2015 Verifiable Elections

-- ===================================================================
-- Cluster POLLBOOK
-- ===================================================================

static_diagram DVL
component
  cluster POLLBOOK
  component
    class BALLOT_DATA
      feature
        -- query
        
        -- What is your style? 
        style : VALUE  -- ballot type represented as a value for now
        
        -- What is your printed representation?
        printed_representation : PDF 
        
        -- creation routine
        
        create
          -> the_style : VALUE
          -> the_printed_representation : PDF
          require the_style /= Void
          ensure style = the_style;
                 printed_representation = the_printed_representation
          end
                 
      invariant
        -- The style must not be Void.
        style /= Void
      end
      
  class DATA_QUERY
    feature
      -- query
      
      -- What type of data are you a query for?
      data_type : VALUE -- data type represented as a value for now
      
      -- What is your matching string for the_field?
      matching_string : STRING
        -> the_field : STRING
        require the_field /= Void
        end
        
      -- Must the_field be matched exactly or approximately?
      exact_match : BOOLEAN 
        -> the_field : STRING
        require the_field /= Void
        end
        
      -- Does the_data match you?
      matches : BOOLEAN
        -> the_data : VALUE
        require the_data /= Void
        -- ensure Result if and only if the_data matches this query
        end
         
      -- command
      
      -- Your matching string for the_field is the_string!   
      set_matching_string : Void
        -> the_field : STRING
        -> the_match : STRING
        require the_field /= Void and the_match /= Void
        ensure delta matching_string;
               matching_string(the_field) = the_match
        end
      
      set_exact_match : Void
        -> the_field : STRING
        -> the_exact_match : BOOLEAN 
        require the_field /= Void and the_match /= Void
        ensure delta exact_match;
               exact_match(the_field) = the_exact_match
        end
        
      -- creation routine
      
      create
        -> the_data_type : VALUE
        require the_data_type /= Void
        ensure data_type = the_data_type;
               for_all f : STRING it_holds matching_string(f) = Void;
               for_all f : STRING it_holds exact_match(f) = false;
        end
        
    invariant
      data_type /= Void
    end
  
  class DATA_STORE
    -- note: some kind of modeling of causality/data versioning should be
    -- in here but isn't yet
    feature
      -- query
      
      -- What are the data items that match the_query? 
      execute_query : SET[VALUE]
        -> the_query : DATA_QUERY
        ensure Result /= Void
        end
      
      -- What is your stored matching item for the_item of the_type?
      -- "matching" is type-dependent; for example, two voter records "match" if 
      -- their unique voter IDs match, regardless of the values of the other fields
      matching_item : VALUE
        -> the_type : VALUE
        -> the_item : VALUE
          -- ensure Result = (the matching item in the store for the_item of the_type,
          --                  or Void if no such item is in the store)
                
      -- Is the_item of type the_type different from the matching item in the data store?
      is_item_changed : BOOLEAN
        -> the_type : VALUE
        -> the_item : VALUE
        ensure Result = (the_item /= matching_item(the_type, the_item))
        end
        
      -- command
      
      -- Attempt to add the_item of type the_type!
      add_item : BOOLEAN
        -> the_type : VALUE
        -> the_item : VALUE
        require matching_item(the_item_type, the_item) = Void
        ensure delta matching_item(the_item_type, the_item);
               matching_item(the_item_type, the_item) = the_item
        end
      
      -- Attempt to delete the_item of type the_type!
      delete_item : Void
        -> the_type : VALUE
        -> the_item : VALUE
        require matching_item(the_item_type, the_item) = the_item
        ensure delta matching_item(the_item_type, the_item);
               matching_item(the_item_type, the_item) = Void
        end
        
      -- Attempt to update the_item of type the_type!
      update_item : Void
        -> the_type : VALUE
        -> the_item : VALUE
        require matching_item(the_item_type, the_item)
        ensure delta matching_item(the_item_type, the_item);
               matching_item(the_item_type, the_item) = the_item
        end
      
      -- creation routine
      
      create
        ensure for_all i, j : VALUE it_holds matching_item(i, j) = Void
        end
      
    -- invariant: something about not violating causality
      
    end
  
  class PRECINCT_DATA
    feature
      -- query
      
      -- What is your precinct identifier?
      precinct_id : VALUE
    
      -- What is your polling place information?
      polling_place_info : VALUE
    
      -- creation routine
      
      create
        -> the_precinct_id : VALUE
        -> the_polling_place_info : VALUE
        require the_precinct_id /= Void;
                the_polling_place_info /= Void
        ensure precinct_id = the_precinct_id;
               polling_place_info = the_polling_place_info
        end
        
    invariant
      precinct_id /= Void;
      polling_place_info /= Void
    end
    
  class SCANNER
    feature
      -- query
      
      -- What is the data encoded on the_token?
      read : VALUE
        -> the_token : VALUE
        require the_token /= Void
        -- ensure Result accurately reflects the data on the token
        end
    end
    
  class STATION 
    feature
      -- query
      
      -- What is your identifier?
      identifier : VALUE
      
      -- What is your Internet address?
      address : INTERNET_ADDRESS
        ensure Result = communicator.address()
        end
        
      -- What is your communicator?
      communicator : COMMUNICATOR
      
      -- What is your data store?
      data_store : DATA_STORE
      
      -- What is your logger?
      logger : LOGGER
      
      -- What is your precinct information?
      precinct : PRECINCT_DATA
      
      -- What is the master password for this polling place?
      master_password : STRING 
      
      -- What stations are your peers?
      peers : SET[INTERNET_ADDRESS]
      
      -- What stations exist on the local network?
      local_stations : SET[INTERNET_ADDRESS]
      
      -- What station is the local manager?
      local_manager : INTERNET_ADDRESS
      
      -- Is a local manager election in progress?
      local_manager_election_in_progress : BOOLEAN 
        ensure Result -> local_manager = Void
        end
        
      -- What voter data matches the_criteria?
      matching_voters : SET[VOTER_DATA]
        -> the_criteria : DATA_QUERY
        require the_criteria /= Void;
                the_criteria.data_type = VOTER_DATA; 
        ensure Result /= Void;
               for_all v : VOTER_DATA such_that v member_of Result 
                 it_holds the_criteria.matches(v)
        end
        
      -- What poll worker data matches the_criteria?
      matching_poll_workers : SET[WORKER_DATA]
        -> the_criteria : DATA_QUERY
        require the_criteria /= Void;
                the_criteria.data_type = WORKER_DATA;
        ensure Result /= Void;
               for_all w : WORKER_DATA such_that w member_of Result
                 it_holds the_criteria.matches(w)
        end
        
      -- How many voters have checked in at this station?
      checked_in_count : NATURAL
      
      -- What are the voter data for voters who have checked in at this station?
      checked_in_voters : SET[VOTER_DATA]
        ensure Result /= Void;
               Result.size = checked_in_count;
               for_all v : VOTER_DATA such_that v member_of Result
                 it_holds v.precinct_status(precinct) member_of { GivenBallot, NotGivenBallot }
        end
        
      -- How many ballots have been distributed by this station?
      ballots_distributed : NATURAL
      
      -- What is the polling place information for the_precinct?
      polling_place_info : VALUE
        -> the_precinct : VALUE
        -- ensure Result is correct based on data store query of the_precinct
      
      -- Are the polls open?
      are_polls_open : BOOLEAN 
      
      -- command
      
      -- Update the peers and stations on the local network!
      scan_local_network : Void
        -- ensure the list of local stations and peers is appropriately updated
        
      -- the_station is the local manager!
      set_manager : Void
        -> the_station : INTERNET_ADDRESS
        require the_station /= Void;
                the_station member_of local_stations
        ensure delta local_manager;
               delta local_manager_election_in_progress;
               delta peers;
               local_manager = the_station;
               local_manager member_of peers;
               not local_manager_election_in_progress
        end
        
      -- Start a local manager election!
      start_local_manager_election : Void
        require local_manager = Void
        ensure delta local_manager_election_in_progress;
               local_manager_election_in_progress
        end
        
      -- Exchange public keys with the_station!
      exchange_keys : Void
        -> the_station : INTERNET_ADDRESS
        require the_station /= Void;
        -- ensure the communicator attempts a key exchange; this needs work/design/clarification
        end
        
      -- Remove the_station as a peer!
      remove_peer : Void
        -> the_station : INTERNET_ADDRESS
        require the_station /= Void;
                the_station member_of peers
        ensure delta local_manager;
               delta peers;
               not (the_station member_of peers);
               old local_manager = the_station -> local_manager_election_in_progress
               -- local manager elections still need work/design/clarification
        end
       
      -- Announce to all peers that the_station has been removed as a peer!" 
      announce_remove_peer : Void
        -> the_station : INTERNET_ADDRESS
        require the_station /= Void;
                local_manager = Current;
                not the_station member_of peers
        -- ensure messages are sent to all remaining peers informing them of the removal
        end
      
      -- Add the_station as a peer!
      add_peer : Void
        -> the_station : INTERNET_ADDRESS
        require the_station /= Void;
                not the_station member_of peers
        ensure delta peers;
               the_station member_of peers
        end
      
      -- Announce to all peers that the station has been added as a peer!
      announce_add_peer : Void
        -> the_station : INTERNET_ADDRESS
        require local_manager = Current;
                the_station member_of peers
        -- ensure messages are sent to all pre-existing peers informing them of the addition
        end
      
      -- Open the polls!
      open_polls : Void
        require not are_polls_open
        ensure delta are_polls_open;
               are_polls_open
        end
      
      -- Announce to all peers that the polls have been opened!
      announce_open_polls : Void
        require local_manager = Current;
                are_polls_open
        -- ensure messages are sent to all peers informing them of the polls opening
        end
      
      -- Close the polls!
      close_polls : Void
        require are_polls_open
        ensure delta are_polls_open;
               not are_polls_open
        end
      
      -- Announce to all peers that the polls have been closed!
      announce_close_polls : Void
        require local_manager = Current;
                not are_polls_open
        -- ensure messages are sent to all peers informing them of the polls closing
        end
        
      -- Promote the_station to local manager!
      promote_to_manager : Void
        -> the_station : INTERNET_ADDRESS
        require local_manager = Current; 
                the_station member_of peers
        ensure delta local_manager;
               local_manager = the_station
        end
      
      -- Announce to all peers that the_station has been promoted to manager!
      announce_promotion_to_manager : Void
        -> the_station : INTERNET_ADDRESS
        require the_station /= Void;
                local_manager = the_station
        -- ensure messages are sent to all peers informing them of the promotion
        end 
        
      -- Attempt to check the_voter in!
      check_in : Void
        -> the_voter : VOTER_DATA
        require the_voter /= Void
        ensure not (the_voter member_of old checked_in_voters) -> 
                     delta the_voter.precinct_status(precinct) 
                 and delta checked_in_count
                 and delta checked_in_voters
                 and the_voter.precinct_status(precinct) = NotGivenBallot
                 and the_voter member_of checked_in_voters 
                 and checked_in_count = old checked_in_count + 1;
        end
                
      -- Distribute a ballot to the_voter! 
      distribute_ballot : Void
        -> the_voter : VOTER_DATA
        require the_voter /= Void;
                the_voter.precinct_status(precinct) = NotGivenBallot;
                the_voter.entitled_to_ballot
        ensure delta the_voter;
               delta ballots_distributed;
               the_voter.precinct_status(precinct) = GivenBallot;
               the_voter.voted;
               -- the voter is given the appropriate ballot
               ballots_distributed = old ballots_distributed + 1
        end
        
      -- creation routine
      create
        -> the_identifier : VALUE
        -> the_data_store : DATA_STORE
        -> the_logger : LOGGER
        -> the_precinct : PRECINCT_DATA
        -> the_master_password : STRING
        -> the_manager_flag : BOOLEAN
        require the_identifier /= Void;
                the_data_store /= Void;
                the_logger /= Void;
                the_precinct /= Void;
                the_master_password /= Void
        ensure identifier = the_identifier;
               data_store = the_data_store;
               logger = the_logger;
               precinct = the_precinct;
               master_password = the_master_password;
               communicator /= Void;
               peers /= Void;
               peers.size = 0;
               the_manager_flag -> local_manager = Current;
               not the_manager_flag -> local_manager = Void;
               checked_in_count = 0;
               checked_in_voters /= Void;
               checked_in_voters.size = 0;
               ballots_distributed = 0;
               not are_polls_open
        end      
        
        invariant
          for_all s, t : STATION it_holds s /= t <-> s.identifier /= t.identifier;
          communicator /= Void;
          data_store /= Void;
          logger /= Void;
          precinct /= Void
    end

  class STATION_UI
    feature
      data_store : DATA_STORE
      precinct : PRECINCT_DATA
      station : STATION
            
      -- query
      
      -- "What is a report of the_type?"
      generate_report : VALUE 
        -> the_type : VALUE
        -- constraints are jurisdiction-dependent
        
      -- command
      
      -- "Create a local manager!"
      create_local_manager : Void
        require station = Void
        ensure delta station;
               station /= Void;
               station.local_manager = station
        end
      
      -- "Create a station that waits for a local manager!"
      create_station : Void
        require station = Void
        ensure delta station;
               station /= Void;
               station.local_manager /= station;
               station.data_store = data_store;
               station.precinct = precinct
        end
        
      -- "Make the_station the local manager!"
      make_manager : Void
        -> the_station : STATION
        require station.manager = station;
                not station.manager_election_in_progress;
                the_station member_of station.peers
        ensure delta station.manager;
               station.manager = the_station
        end
        
      -- "Attempt to check in the_voter!"
      check_in : Void
        -> the_voter : VOTER_DATA
        require the_voter /= Void;
        ensure not (the_voter member_of old station.checked_in_voters) -> 
                     delta the_voter.precinct_status(station.precinct) 
                 and delta station.checked_in_count
                 and delta station.checked_in_voters
                 and the_voter.precinct_status(station.precinct) /= NotSeen
                 and the_voter member_of station.checked_in_voters 
                 and station.checked_in_count = old station.checked_in_count + 1
                 and the_voter.precinct_status(station.precinct) = GivenBallot ->
                       station.ballots_distributed = old station.ballots_distributed + 1;
        end
      
      -- "Open the polls!"
      open_polls : VOID
        require station.local_manager = station;
                not station.are_polls_open;
        ensure delta station.are_polls_open;
               station.are_polls_open
        end
        
      -- "Close the polls!"
      close_polls : VOID
        require station.local_manager = station;
                station.are_polls_open
        ensure delta station.are_polls_open;
               not station.are_polls_open
        end
            
      -- "Shut down your station for the_reason!"
      shutdown : VOID
        -> the_reason : VALUE
        require the_reason /= Void
        -- ensure the station is no longer running - needs further thought
        end
      
      -- "the_poll_worker is starting a shift now!"
      start_shift : VOID
        -> the_poll_worker : WORKER_DATA
        require the_poll_worker /= Void;
                not the_poll_worker.working_now
        ensure delta the_poll_worker.current_shift_location;
               delta the_poll_worker.current_shift_start;
               CallTime <= the_poll_worker.current_shift_start; -- assume CallTime is the time of feature call
               the_poll_worker.current_shift_start <= Now;
               the_poll_worker.current_shift_location = precinct
        end
      
      -- "the_poll_worker is ending a shift now!"
      end_shift : VOID
        -> the_poll_worker : WORKER_DATA
        require the_poll_worker /= Void;
                the_poll_worker.working_now;
                the_poll_worker.current_shift_location = precinct
        ensure delta the_poll_worker.current_shift_location;
               delta the_poll_worker.current_shift_start;
               delta the_poll_worker.shifts;
               delta the_poll_worker.hours;
               the_poll_worker.current_shift_location = Void;
               the_poll_worker.current_shift_start = Void;
               the_poll_worker.shifts.last.location = old the_poll_worker.current_shift_location;
               the_poll_worker.shifts.last.start_time = old the_poll_worker.current_shift_start;
               CallTime <= the_poll_worker.shifts.last.end_time;
               the_poll_worker.shifts.last.end_time <= Now
        end
        
      -- creation routine
      create
        -> the_data_store : DATA_STORE
        -> the_precinct : PRECINCT
        require the_data_store /= Void;
                the_precinct /= Void
        ensure data_store = the_data_store;
               precinct = the_precinct;
               station /= Void;
               station.data_store = the_data_store;
               station.precinct = the_precinct
        end
    end
  
  class VOTER_DATA
    feature
      valid_election_statuses : SET[VALUE]
        ensure Result = {Active, Suspended, Provisional, VotedInPerson, 
                         EarlyVotedInPerson, AbsenteeVotedInPerson, 
                         VotedByMail, VotedProvisionally, MailBallotNotReturned,
                         Ineligible, Unavailable}
        end
        
      voted_statuses : SET[VALUE]
        ensure Result = {VotedInPerson, EarlyVotedInPerson, AbsenteeVotedInPerson,
                         VotedByMail, VotedProvisionally}
        end
        
      valid_precinct_statuses : SET[VALUE]
        ensure Result = {NotSeen, NotGivenBallot, GivenBallot}
        end
        
      -- query
      
      -- "What is your last name?"
      last_name : STRING
      
      -- "What is your first name?"
      first_name : STRING
      
      -- "What is your middle name?"
      middle_name : STRING
      
      -- "What is the suffix of your name?"
      name_suffix : STRING
      
      -- "What is your date of birth?"
      date_of_birth : DATE
      
      -- "What is your street address?"
      street_address : STRING
      
      -- "What is your municipality?"
      municipality : STRING
      
      -- "What is your ZIP code?"
      zip_code : STRING
        
      -- "What is your driver's license/state ID card number?"
      dl_state_id : STRING
      
      -- "What is your voter identification number?"
      voter_id : STRING
      
      -- "What is the precinct identifier of the precinct in which you are registered to vote?"
      precinct_id : VALUE
      
      -- "Are you eligible to vote in this election?"
      eligible_to_vote : BOOLEAN 
      
      -- "Have you voted in this election?"
      voted : BOOLEAN
        ensure Result = election_status member_of voted_statuses
        end
        
      -- "Have you requested an absentee ballot for this election?"
      requested_absentee_ballot : BOOLEAN
        ensure Result = election_status member_of 
                        {AbsenteeVotedInPerson, VotedByMail, MailBallotNotReturned}
        end
        
      -- "Have you returned an absentee ballot for this election?"
      returned_absentee_ballot : BOOLEAN 
        ensure Result = election_status member_of
                        {AbsenteeVotedInPerson, VotedByMail}
        end
        
      -- "Are you required to show your ID at the polling place?"
      id_required : BOOLEAN
      
      -- "Must your address be hidden for privacy reasons?"
      address_privacy : BOOLEAN
      
      -- "What is your status for this election?"
      election_status : VALUE
        ensure Result member_of valid_election_statuses
        end
        
      -- "What is your status at precinct the_precinct?"
      precinct_status : VALUE
        -> the_precinct : PRECINCT_DATA
        ensure Result member_of valid_precinct_statuses
        end
        
      -- "Does your status entitle you to an in-person ballot?"
      eligible_for_ballot : BOOLEAN
        -- ensure result is jurisdiction-dependent but correct
        
      -- command
      
      -- "Your status for this election is the_status!"
      set_election_status : Void
        -> the_status : VALUE
        require the_status member_of valid_election_statuses
        ensure delta election_status;
               election_status = the_status
        end
      
      -- "Your status at precinct the_precinct is the_status!"
      set_precinct_status : Void
        -> the_precinct : PRECINCT_DATA
        -> the_status : VALUE
        require the_status member_of valid_precinct_statuses
        ensure delta precinct_status(the_precinct);
               precinct_status(the_precinct) = the_status
        end
        
      -- creation routine
      create
        -> the_last_name : STRING
        -> the_first_name : STRING
        -> the_middle_name : STRING 
        -> the_name_suffix : STRING
        -> the_date_of_birth : DATE
        -> the_street_address : STRING
        -> the_municipality : STRING
        -> the_zip_code : STRING
        -> the_dl_state_id : STRING
        -> the_voter_id : STRING
        -> the_precinct_id : VALUE
        -> the_id_required : BOOLEAN 
        -> the_address_privacy : BOOLEAN
        -> the_election_status : VALUE
        require the_last_name /= Void; -- note that names can be the empty string
                the_first_name /= Void;
                the_middle_name /= Void;
                the_name_suffix /= Void;
                the_date_of_birth /= Void;
                the_street_address /= Void;
                the_municipality /= Void;
                the_zip_code /= Void;
                the_dl_state_id /= Void;
                the_voter_id /= Void;
                the_precinct_id /= Void;
                the_election_status member_of valid_election_statuses
        ensure last_name = the_last_name;
               first_name = the_first_name;
               middle_name = the_middle_name;
               name_suffix = the_name_suffix;
               date_of_birth = the_date_of_birth;
               street_address = the_street_address;
               municipality = the_municipality;
               zip_code = the_zip_code;
               dl_state_id = the_dl_state_id;
               voter_id = the_voter_id;
               precinct_id = the_precinct_id;
               election_status = the_election_status;
               for_all p : PRECINCT_DATA it_holds precinct_status(p) = NotSeen
        end
    end
    
    class WORKER_DATA
      feature
        -- query
        
        -- What is your name?
        name : STRING
        
        -- What is your address?
        address : STRING
        
        -- What is your social security number?
        ssn : STRING
        
        -- What shifts have you worked?
        shifts : SEQUENCE[WORKER_SHIFT]
        
        -- How many total hours have you worked?
        hours : NUMERIC
        
        -- Are you working now?
        working_now : BOOLEAN
        
        -- Where are you currently working?
        current_shift_location : VALUE
          
        -- When did your current shift start?
        current_shift_start : DATE_TIME
                
        -- command
        
        -- You are starting a shift!
        start_shift : Void 
          -> the_start : DATE_TIME
          -> the_polling_place : VALUE
          require not working_now;
                  the_start <= Now
          ensure delta current_shift_start;
                 current_shift_start = the_start
          end
          
        -- You are finishing a shift!
        finish_shift : Void
          -> the_finish : DATE_TIME
          require working_now;
                  current_shift_start < the_finish;
                  the_finish <= Now; -- assume Now is the current date/time
          ensure {current_shift_location, current_shift_start, the_finish} member_of shifts;
                 hours = old hours + (the_finish - current_shift_start);
                 current_shift_start = Void
          end
          
        -- creation routine
        
        create
          -> the_name : STRING
          -> the_address : STRING
          -> the_ssn : STRING
          ensure name = the_name;
                 address = the_address;
                 ssn = the_ssn;
                 hours = 0;
                 shifts.size = 0;
                 current_shift_location = Void;
                 current_shift_start = Void;
          end
          
      invariant
        name /= Void;
        address /= Void;
        ssn /= Void;
        shifts /= Void;
        0 <= hours;
        working_now = (current_shift_start /= Void);
        current_shift_start <= Now; -- assume Now is the current date/time
        current_shift_start /= Void -> current_shift_location /= Void;
        hours <= old hours;
        for_all s : WORKER_SHIFT such_that s member_of old shifts it_holds s member_of shifts
      end
      
--        explanation 
--          "Data about a poll worker that is relevant to the functioning of the poll book."
--        query
--          "What is your name?",
--          "What is your address?", 
--          "What is your social security number?",
--          "What shifts have you worked?",
--          "How many total hours have you worked?",
--          "Are you working now?",
--          "When did your current shift start?"
--        command
--          "Your name, address, and social security number are the_name, the_address, \
--       \ and the_social_security_number!", 
--        "You are starting a shift!",
--        "You are finishing a shift!"
--      constraint
--        "The total hours worked is the sum of (end_time - start_time) over all \ 
--       \ the shifts worked.",
--        "A poll worker can only start a shift when they are not working.",
--        "A poll worker can only finish a shift when they are working.",
--        "A poll worker only has a valid shift start time when they are working.",
--        "When a poll worker starts working, the start time is saved.",
--        "When a poll worker finishes working, a shift is recorded from the saved \
--       \ start time to the time at which the poll worker finished working."

--  explanation
--    "Data about a single shift."
--  query
--    "Where are you occurring?",
--    "When did you start?",
--    "Have you ended yet?",
--    "When did you end?"
--  command
--    "You are occurring at the_location!",
--    "You started at the_date_and_time!",
--    "You ended at the_date_and_time!"
--  constraint
--    "The location may only be set once.",
--    "The start time may only be set once.",
--    "The end time may only be set once.",
--    "A shift has not ended if and only if it has no end time set."

  end
end
