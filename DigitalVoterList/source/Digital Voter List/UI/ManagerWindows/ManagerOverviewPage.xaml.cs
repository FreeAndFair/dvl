using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using UI.Data;
using UI.StationWindows;

namespace UI.ManagerWindows
{
    /// <summary>
    /// Interaction logic for ManagerOverviewPage.xaml
    /// </summary>
    public partial class ManagerOverviewPage
    {
        private readonly Frame _parent;
        private readonly UiHandler _ui;
        private Thread _activeUpdateThread;
        public bool Blocked;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="parent">the frame which tihs page is displayed in</param>
        /// <param name="ui">the UIHandler for this UI</param>
        public ManagerOverviewPage(Frame parent, UiHandler ui)
        {
            InitializeComponent();
            _parent = parent;
            _ui = ui;
            _ui.ManagerOverviewPage = this;

            checkValidityButton.IsEnabled = false;

            WaitingLabel.Content = "";
            LoadingBar.Visibility = Visibility.Hidden;
            LoadingBar.Value = 100;
            RemoveButton.IsEnabled = false;
            AddButton.IsEnabled = false;
            EndElectionButton.IsEnabled = false;

            //Change the width of the window
            var wnd = Window.GetWindow(_parent);
            if (wnd != null)
                wnd.Width = 1000;

            PopulateList();
        }

        /// <summary>
        /// Called when the remove button is clicked
        /// </summary>
        /// <param name="sender">autogenerated</param>
        /// <param name="e">autogenerated</param>
        private void RemoveButtonClick(object sender, RoutedEventArgs e)
        {
            if (((StationStatus)ManagerstationGrid.SelectedItem).Connected)
            {
                _ui.RemoveStation(((StationStatus)ManagerstationGrid.SelectedItem).IpAdress);
                UnmarkSelectedStation();
                PopulateList();
            }
        }

        /// <summary>
        /// Called when the add button is clicked
        /// </summary>
        /// <param name="sender">autogenerated</param>
        /// <param name="e">autogenerated</param>
        private void AddButtonClick(object sender, RoutedEventArgs e)
        {
            if (ManagerstationGrid.SelectedCells.Count != 0)
            {
                _ui.ExchangeKeys(new IPEndPoint(IPAddress.Parse(((StationStatus) ManagerstationGrid.SelectedItem).IpAdress), 62000));
            }
        }

        /// <summary>
        /// Called when the done button is clicked
        /// </summary>
        /// <param name="sender">autogenerated</param>
        /// <param name="e">autogenerated</param>
        private void CheckValidityButtonClick(object sender, RoutedEventArgs e)
        {
            if (!voterCardNumberTextbox.Text.Equals(""))
            {
                WaitingLabel.Content = "Venter på svar..";
                _ui.RequestBallot(voterCardNumberTextbox.Text);
            }else if (!CPRNumberTextbox.Text.Equals(""))
            {
                var d = new CheckMasterPasswordDialog(_ui);
                d.ShowDialog();

                if (d.DialogResult.HasValue && d.DialogResult == true)
                {
                    if (d.IsCancel)
                        return;

                    _ui.RequestBallotOnlyCPR(CPRNumberTextbox.Text, d.TypedPassword);
                }
                else
                {
                    MessageBox.Show("Det kodeord du indtastede er ikke korret, prøv igen", "Forkert Master Kodeord", MessageBoxButton.OK);
                } 
            }
        }

        /// <summary>
        /// Called when the end election button is clicked
        /// </summary>
        /// <param name="sender">autogenerated</param>
        /// <param name="e">autogenerated</param>
        private void EndElectionButtonClick(object sender, RoutedEventArgs e)
        {
            var d = new CheckMasterPasswordDialog(_ui);
            d.ShowDialog();

            if (d.DialogResult.HasValue && d.DialogResult == true)
            {
                if (d.IsCancel != true)
                {
                    if (_activeUpdateThread != null)
                        _activeUpdateThread.Abort();

                    _ui.AnnounceEndElection();
                    _ui.ManagerOverviewPage = null;
                    _parent.Navigate(new EndedElectionPage(_parent, _ui));
                }
            }
            else
            {
                MessageBox.Show("Det indtastede kodeord er ikke korret, prøv igen", "Forkert Master Kodeord", MessageBoxButton.OK);
            }
        }

        /// <summary>
        /// Called when the make manager button is clicked
        /// </summary>
        /// <param name="sender">autogenerated</param>
        /// <param name="e">autogenerated</param>
        private void MakeManagerButtonClick(object sender, RoutedEventArgs e)
        {
            var d = new CheckMasterPasswordDialog(_ui);
            d.ShowDialog();

            if (d.DialogResult.HasValue && d.DialogResult == true)
            {
                if (ManagerstationGrid.SelectedItem != null && _ui.MakeManager(new IPEndPoint(IPAddress.Parse(((StationStatus)ManagerstationGrid.SelectedItem).IpAdress), 62000)))
                {
                    if (d.IsCancel)
                        return;

                    if (_activeUpdateThread != null)
                        _activeUpdateThread.Abort();

                    var wnd = (StationWindow)Window.GetWindow(_parent);
                    if (wnd != null)
                    {
                        wnd.Width = 600;
                    }

                    _ui.ManagerOverviewPage = null;
                    _parent.Navigate(new BallotRequestPage(_ui, _parent));
                }
                else
                {
                    if (d.IsCancel)
                        return;

                    MessageBox.Show("Der kunne ikke forbindes til den valgte station", "Ingen forbindelse", MessageBoxButton.OK);
                }
            }
            else
            {
                MessageBox.Show("Det kodeord du indtastede er ikke korrekt, prøv igen", "Forkert Master Kodeord", MessageBoxButton.OK, MessageBoxImage.Stop);
            }
        }

        /// <summary>
        /// Called when the refresh button is clicked
        /// </summary>
        /// <param name="sender">autogenerated</param>
        /// <param name="e">autogenerated</param>
        private void RefreshButtonClick(object sender, RoutedEventArgs e)
        {
            PopulateList();
        }

        /// <summary>
        /// Populates the list with the appropiate machines
        /// </summary>
        public void PopulateList()
        {
            EndElectionButton.IsEnabled = false;

            if (_activeUpdateThread != null)
                _activeUpdateThread.Abort();

            RefreshButton.IsEnabled = false;
            Thread oThread = new Thread(() => PopulateListThread(this));
            _activeUpdateThread = oThread;
            oThread.Start();
        }

        /// <summary>
        /// the thread to populate the list
        /// </summary>
        /// <param name="mvp">this manager overview page</param>
        public void PopulateListThread(ManagerOverviewPage mvp)
        {
            mvp.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal, new Action(delegate { UpdateLabel.Content = "Opdaterer..."; }));
            mvp.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal, new Action(delegate { LoadingBar.Visibility = Visibility.Visible; }));
            IEnumerable<IPEndPoint> peerlist = _ui.GetPeerlist();

            if (peerlist != null)
            {
                var dataSource = (from ip in peerlist where _ui.IsStationActive(ip) select new StationStatus { IpAdress = ip.Address.ToString(), Connected = true }).ToList();
                dataSource.AddRange(from ip in _ui.DiscoverPeers() where !peerlist.Contains(ip) select new StationStatus { IpAdress = ip.Address.ToString(), Connected = false });

                mvp.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal, new Action(delegate { ManagerstationGrid.ItemsSource = dataSource; }));
                mvp.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal, new Action(delegate { ManagerstationGrid.Items.Refresh(); }));

            }
            mvp.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal, new Action(delegate { UpdateLabel.Content = ""; }));
            mvp.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal, new Action(delegate { LoadingBar.Visibility = Visibility.Hidden; }));
            mvp.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal, new Action(delegate { RefreshButton.IsEnabled = true; }));
            mvp.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority.Normal, new Action(delegate { EndElectionButton.IsEnabled = true; }));
        }

        /// <summary>
        /// Checks whether a string is purely numeric or not
        /// </summary>
        /// <param name="text">the string to check</param>
        /// <returns>whether a string is purely numeric or not</returns>
        private static bool IsNumeric(string text)
        {
            int result;
            return int.TryParse(text, out result);
        }

        /// <summary>
        /// Sees to that the textboxes only accepts numbers
        /// </summary>
        /// <param name="sender">autogenerated</param>
        /// <param name="e">autogenerated</param>
        private void PreviewTextInputHandler(Object sender, TextCompositionEventArgs e)
        {
            e.Handled = !IsNumeric(e.Text);
        }

        /// <summary>
        /// Sees to that the textboxes only accepts numbers when something is pasted
        /// </summary>
        /// <param name="sender">autogenerated</param>
        /// <param name="e">autogenerated</param>
        private void PastingHandler(object sender, DataObjectPastingEventArgs e)
        {
            if (e.DataObject.GetDataPresent(typeof(String)))
            {
                var text = (String)e.DataObject.GetData(typeof(String));
                if (!IsNumeric(text)) e.CancelCommand();
            }
            else e.CancelCommand();
        }

        /// <summary>
        /// After this manager tries to connect to a station, the station replies.
        /// This method is called when the reply is received.
        /// </summary>
        /// <param name="ip"> the IP adress of the replying station</param>
        /// <returns> the password the user has typed in the AcceptStationDialog</returns>
        public string IncomingReply(IPEndPoint ip)
        {
            var acd = new AcceptStationDialog(ip, _ui);
            var result = acd.ShowDialog();

            if (result.HasValue && result == true)
            {
                return acd.TypedPassword;
            }

            return "";
        }

        /// <summary>
        /// Called when the CPRNumberTextbox text changes
        /// </summary>
        /// <param name="sender">autogenerated</param>
        /// <param name="e">autogenerated</param>
        private void CPRNumberTextboxTextChanged(object sender, TextChangedEventArgs e)
        {
            if (CPRNumberTextbox.Text.Length>0)
            {
                voterCardNumberTextbox.Text = "";
            }
            else
            {
                CPRNumberTextbox.Text = "";
            }

            if ((CPRNumberTextbox.Text.Length == 10 && WaitingLabel.Content.Equals("") && !Blocked) || (voterCardNumberTextbox.Text.Length == 6 /*TODO: Correct to voternumber length*/ && WaitingLabel.Content.Equals("") && !Blocked))
            {
                checkValidityButton.IsEnabled = true;
            }
            else
            {
                checkValidityButton.IsEnabled = false;
            }
        }

        /// <summary>
        /// Called when a response to a ballot request is received
        /// </summary>
        /// <param name="succes">whether or not to hand out a ballot</param>
        public void BallotResponse(bool succes)
        {
            WaitingLabel.Content = "";

            if (succes)
                MessageBox.Show("Vælgeren " + voterCardNumberTextbox.Text + " må gives en stemmeseddel ", "Giv stemmeseddel", MessageBoxButton.OK, MessageBoxImage.Exclamation);
            else
            {
                MessageBox.Show("Vælgeren " + voterCardNumberTextbox.Text + " må IKKE gives en stemmeseddel ", "Giv ikke stemmeseddel", MessageBoxButton.OK, MessageBoxImage.Stop);
            }
            
            voterCardNumberTextbox.Text = "";
            
            CPRNumberTextbox.Text = "";

        }
        
        /// <summary>
        /// Sets the password label
        /// </summary>
        /// <param name="content">the new content of the label</param>
        public void SetPasswordLabel(string content)
        {
            PasswordLabel.Content = content;
        }

        /// <summary>
        /// Marks a machine as connected in the list
        /// </summary>
        /// <param name="ip">the ip address of the machine</param>
        public void MarkAsConnected(IPEndPoint ip)
        {
            foreach (StationStatus s in ManagerstationGrid.Items)
            {
                if (s.IpAdress == ip.Address.ToString())
                    s.Connected = true;
            }
            ManagerstationGrid.Items.Refresh();
        }

        /// <summary>
        /// Unmark a connected station in the list
        /// </summary>
        /// <param name="ip">the IP address of the station to unmark</param>
        public void UnmarkSelectedStation()
        {
            ((StationStatus)ManagerstationGrid.SelectedItem).Connected = false;
            ManagerstationGrid.Items.Refresh();
        }

        private void ManagerstationGridSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ManagerstationGrid.SelectedItem != null) {
                if (((StationStatus)ManagerstationGrid.SelectedItem).Connected)
                {
                    AddButton.IsEnabled = false;
                    RemoveButton.IsEnabled = true;
                }
                else
                {
                    AddButton.IsEnabled = true;
                    RemoveButton.IsEnabled = false;
                }
            }
        }
    }
}
