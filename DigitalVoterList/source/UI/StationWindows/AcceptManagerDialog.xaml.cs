// --------------------------------------------------------------------------------------------------------------------
// <copyright file="AcceptManagerDialog.xaml.cs" company="">
//   
// </copyright>
// <summary>
//   Interaction logic for AcceptManagerDialog.xaml
// </summary>
// --------------------------------------------------------------------------------------------------------------------

#region Copyright and License

// // -----------------------------------------------------------------------
// // <copyright file="AcceptManagerDialog.xaml.cs" company="DemTech">
// // Copyright (C) 2013 Joseph Kiniry, DemTech, 
// // IT University of Copenhagen, Technical University of Denmark,
// // Nikolaj Aaes, Nicolai Skovvart
// // </copyright>
// // -----------------------------------------------------------------------
#endregion

namespace UI.StationWindows {
  using System.Net;
  using System.Windows;
  using System.Windows.Controls;

  /// <summary>
  /// Interaction logic for AcceptManagerDialog.xaml
  /// </summary>
  public partial class AcceptManagerDialog {
    #region Fields

    /// <summary>
    /// The _parent.
    /// </summary>
    private readonly Frame _parent;

    /// <summary>
    /// The _waiting for manager page.
    /// </summary>
    private readonly WaitingForManagerPage _waitingForManagerPage;

    #endregion

    #region Constructors and Destructors

    /// <summary>
    /// Initializes a new instance of the <see cref="AcceptManagerDialog"/> class. 
    /// Constructor
    /// </summary>
    /// <param name="parent">
    /// the frame this dialog was shown over
    /// </param>
    /// <param name="ip">
    /// the ip address of the Manager
    /// </param>
    /// <param name="waitingForManagerPage">
    /// the Page this dialog was shown over
    /// </param>
    public AcceptManagerDialog(Frame parent, string name, WaitingForManagerPage waitingForManagerPage) {
      InitializeComponent();
      _parent = parent;
      _waitingForManagerPage = waitingForManagerPage;
      ManagerLabel.Content = ManagerLabel.Content.ToString().Replace("NAME", name);
      Activate();
      PwTextbox.Focus();
      OKButton.IsEnabled = false;
      Title = "Accept Manager";
    }

    #endregion

    #region Methods

    /// <summary>
    /// Called when the cancel button is clicked
    /// </summary>
    /// <param name="sender">
    /// autogenerated
    /// </param>
    /// <param name="e">
    /// autogenerated
    /// </param>
    private void CancelButtonClick(object sender, RoutedEventArgs e) {
      DialogResult = false;
      Close();
    }

    /// <summary>
    /// Called when the OK button is clicked
    /// </summary>
    /// <param name="sender">
    /// autogenerated
    /// </param>
    /// <param name="e">
    /// autogenerated
    /// </param>
    private void OkButtonClick(object sender, RoutedEventArgs e) {
      _waitingForManagerPage.TypedPassword = PwTextbox.Password;
      DialogResult = true;
      Close();
    }

    /// <summary>
    /// Called when the text in the PwTextbox changes
    /// </summary>
    /// <param name="sender">
    /// autogenerated
    /// </param>
    /// <param name="e">
    /// autogenerated
    /// </param>
    private void PwTextboxPasswordChanged(object sender, RoutedEventArgs e) { OKButton.IsEnabled = PwTextbox.Password.Length > 0; }

    #endregion
  }
}
