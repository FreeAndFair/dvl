system_chart PX3_DIGITAL_VOTER_LIST
indexing
	authors: "Jens Dahl Møllerhøj <jdmo@itu.dk>, Morten Hyllekilde Andersen <mhyl@itu.dk> & Michael Valentin <mier@itu.dk>";
	course: "BDSA";
	university: "IT University of Copenhagen";
	created: "25-11-2011";
explanation
	"A system for managing and using digital voter lists at an election for at parlament or similair"
cluster ELECTION
	description "Things related to an election to a parlament or similair"
cluster UTILITIES
	description "Various generic utilities for acomplishing simple and/or trivial tasks easier."
end

cluster_chart ELECTION
explanation
	"Things related to an election for a parlament or similair"
class PERSON
	description "A human being with a name"
class RAWPERSON
	description "A datastructure containing all the data that can be found about a human being."
class CITIZEN
	description "A person with a valid and unique ID-number (CPR-number)"
class USER
	description "A person responsible of helping out at an election"
class VOTER_CARD
	description "A ticket to be exchanged for a ballot, that is send out to the voter as a part of the validation process."
class ELECTION_EVENT
	description "A standardized interface for an election."
class GENERAL_EVENT
	description "An actual election, that runs at a specific time, in a specific area and with a specific set of elegible voters."
class VOTING_VENUE
	description "A specific venue for voting, typically a school or similair public place."
class DATA_ACCESS_OBJECT
	description "A standardized interface for querieing a data source."
class DAO_PERMISSION_PROXY
	description "An object that insures that the user have permissions to call functions in the database."
class DAO_MYSQL
	description "A DAO specific for mySQL databases."
class DAO_FACTORY
	description "An object to ensure you get the right database object"
cluster ADMINISTRATION
	description "Things related to the administration of an election"
end

cluster_chart UTILITIES
explanation
	"Various generic utilities for acomplishing simple and/or trivial tasks easier."
class BARCODE
	description "An optical, machine readable, representation of simple data"
class QUIZ
	description "A linguistic expression used to make a request for information"
class RETRY_UTILITY
	description "A utility for retrying actions"
end

cluster_chart ADMINISTRATION
explanation
	"Things related to the administration of an election"
class VOTER_CARD_PRINTER
	description "A system that can generate a voter card, given a set of information."
class DATA_TRANSFORMER
	description "A system that can collect the necessary data for an election event."
class DATA_ANALYZER
	description "A system that can analyze the turnout results after an election."
end

class_chart RETRY_UTILITY
indexing
	in_cluster: "UTILITIES";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"A utility for retrying actions"
command
	"Please retry this action after this amount of time!"
end

class_chart PERSON
indexing
	in_cluster: "ELECTION";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"A human being"
query
	"May I have a new person?",
	"What is your CPR-number?",
	"What is your name?",
	"What is your adress?",
	"What is your passport number?",
	"Where were you born?"
end

class_chart CITIZEN
indexing
	in_cluster: "ELECTION";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"A potential voter"
inherit PERSON
query
	"Are you eligible to vote?",
	"Have you voted?",
	"What is your voting status?",
	"What voter cards belong to you?",
	"What security questions can i ask you?",
	"In what voting venue should you vote?"
command
	"Change your eligibility to vote!",
	"Register that you have voted!"
constraint
	"Must have a CPR-number",
	"A has voted when he has been handed a ballot"
end

class_chart USER
indexing
	in_cluster: "ELECTION";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"The users at the election venue and people adminitrating the electing, whom have different priviledges."
inherit
	CITIZEN
query
	"What is your title?",
	"What permissions do you have?",
	"What voting venues do you work in?"
command
	"Change your password!",
	"Get perm"
constraint
	"Must have a title",
	"Must have a username",
	"Must have a password"
end

class_chart VOTER_CARD
indexing
	in_cluster: "ELECTION";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"The voter card being sent to citizens who are eligibe to vote."
query
	"Can I have a new voter card for this citizen for this ElectionEvent?",
	"Which election event have you been made for?",
	"Who are you addressed to?",
	"What is your ID?",
	"Are you valid?"
command
	"Set this voter card invalid!"
constraint
	"Must have a citizen",
	"Must have an election event",
	"Must have an ID"
end

class_chart ELECTION_EVENT
indexing
	in_cluster: "ELECTION";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"An event containing data of an election."
query
	"Can I have a new election with this name and date?",
	"When are you scheduled to be?",
	"What is your name?"
command
	"Change your scheduled election date!",
	"Change your name!"
constraint
	"Must have a scheduled election date and a name"
end

class_chart VOTING_VENUE
indexing
	in_cluster: "ELECTION";
	created: "2011-12-01";
	revised: "2011-12-01";
explanation
	"A specific venue for voting, typically a school or similair public place."
query
	"What is your name?",
	"What is your address?",
	"What elegible voters do you have?"
end

class_chart DATA_ACCESS_OBJECT
indexing
	in_cluster: "ELECTION";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"An object to access the database in a standardized way."
query
	"What person has this id?",
	"What user has this id?",
	"What user has this username and password?",
	"What votercard has this id?",
	"What votercard has this id-key?",
	"What persons exists with data similiar to this?",
	"May i have all eligible voters in the database?",
	"What users exists with data similiar to this?",
	"What votercards exists with data similiar to this?"
command
	"Create this person with this data!",
	"Create this user with this data!",
	"Create this voter card with this data!",
	"Update this person with this data!",
	"Mark that a voter has voted with standard validation!",
	"mark that a voter has voted with manual validation!",
	"Change this users pasword to this!",
	"Mark this user as invalid!",
	"Mark this voter card as invalid!"
constraint
	"Person to be created must have a name or CPR-number",
	"User to be created must have a username",
	"User to be created must have a password"
end

class_chart DAO_PERMISSION_PROXY
indexing
	in_cluster: "ELECTION";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"An object that insures that the user have permissions to call functions in the database"
inherit DATA_ACCESS_OBJECT
query
	"May I have a new DAO permission proxy for this DAO with this users permissions"
end

class_chart DAO_MYSQL
indexing
	in_cluster: "ELECTION";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"A DAO specific for MySQL databases"
inherit DATA_ACCESS_OBJECT
query
	"Give me a data access object that this user can use."
constraint
	"Must be constructed from factory method"
end

class_chart DAO_FACTORY
indexing
	in_cluster: "ELECTION";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"An object to ensure you get the right database object"
query
	"Give me the right DAO"
end

class_chart BARCODE
indexing
	in_cluster: "UTILITIES";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"An optical, machine readable, representation of simple data, with the ability to output both the data and the optical representation."
query
	"May I have a new barcode object, representing this data?",
	"What data do you hold?",
	"Can I have an optical representation of the data you hold?"
constraint
	"The data must not be longer than 10 charachters",
	"The optical representation must represent the data exactly and unambiguously."
end
	
class_chart QUIZ
indexing
	in_cluster: "UTILITIES";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"A brief assessment used as an authenticator"
query
	"Give me a new quiz with this question and this answer to it",
	"What is the question?",
	"What is the answer?"
constraint
	"The answer must be the answer to the question."
end

class_chart VOTER_CARD_PRINTER
indexing
	in_cluster: "ADMINISTRATION";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"A printer used to create the physical voter cards"
query
	"May I have a new voter card printer?",
	"May I have a voter card based on this voter card information"
end

class_chart DATA_TRANSFORMER
indexing
	in_cluster: "ADMINISTRATION";
	created: "2011-11-25";
	revised: "2011-11-25"
explanation
	"A system used to collect information about all citizens"
query
	"What citizen would I get if I gave him/her this rawPersons information?"
end

scenario_chart USE_SCENARIOS
indexing
	created: "2011-11-30";
	revised: "2011-11-30"
explanation
	"Common scenarios at an election, related to the voter lists, from a users view."
scenario "USER REQUEST FOR INFORMATION"
	description "The user can request information regarding his/her voting status. If the information is not available yet, the user can get an estimate on when it will be available. Otherwise the user can see if they are eligible to vote and if he/she has voted."
scenario "COLLECT DATA"
	description "Data regarding eligible voters and their personal details must be gathered and filtered from various, preferably secure, data sources."
scenario "PRINT VOTER CARDS"
	description "Data must be collected just before printing voter cards. Voter cards are printed based on collected data."
scenario "SEND OUT EXTRA VOTER CARD"
	description "Users who haven't got their voter card (lost in mail, etc.) can request a new voter card. The old voter card is invalidated, and a new one is sent out."
scenario "REGISTER VOTERS WITH VOTER CARD"
	description "When a voter arrives at the voting venue, he/she must present his/her voter card, enter a personal information (eg. last four digits of CPR-number) and answer one or more security questions in order to recieve their ballot."
scenario "MANUAL REGISTRATION OF VOTER WITHOUT A VOTER CARD"
	description "If a voter has no voter card, a manual validation process is performed. The voter must show picture-id or documents of authentication of similair quality. The voter is then evaluated by the election-staff, who determines wether they should be given a ballot. This process is only handled by special, highly trusted election staff."
scenario "CHANGE USER PASSWORD"
	description "When a user is logged in the first time, he/she is asked to change his/her password to a personal password of his/her choice. The password must comply with some specific security constraints."
end

scenario_chart SYSTEM_SCENARIOS
indexing
	created: "2011-11-30";
	revised: "2011-11-30"
explanation
	"Common scenarios at an election, related to the voter lists, from a system view. This is an overview description, omitting technical details."
scenario "USER REQUEST FOR INFORMATION"
	description "A request is sent to the central database. If the information is available, it is returned."
scenario "COLLECT DATA"
	description "Retrieve data from various data sources. Filter and merge the information to the best possible set of data. Store useful information in the central database."
scenario "PRINT VOTER CARDS"
	description "Data must be collected just before printing. A random voter-card-id is attached to each voter in the central database. For each eligible voter, a voter card is printed with the necessary information and keyphrase from the central database."
scenario "SEND OUT EXTRA VOTER CARD"
	description "When a new voter card is sent out, the voter-card-id for the old voter card is marked as invalid in the database, and a new one is written. The new voter-card-id is used on the new voter card, which is sent to the voters address."
scenario "VALIDATION OF VOTERS WITH VOTER CARD"
	description "Voter card is scanned. If voter-card-id is found in central database, a security question (for the election official to ask) is returned. To validate, the voter must enter a personal information that is unknown to the election official (eg. last four digits of their CPR-number). If the voter-card-id is not found in the central database, the voter can't be validated by his/her voter card and must go to manual validation."
scenario "MANUAL VALIDATION OF VOTER WITHOUT A VOTER CARD"
	description "For the manual validation the election-staff representative can look-up information for the given citizen, based on his/her CPR-number. If manual validation is successfull, a manual registration in the system is performed. This process is handled by authorized staff, and only they can perform the manual regeistration after authenticating themself."
scenario "REGISTER VOTER"
	description "A voter must be validated by his/her voter card, or manually by authorized staff, in order to be registered and handed a ballot. A registration can only happen if the voter has not all ready been registered. The registration happens in the central database."
end

scenario_chart SYSTEM_PROCESS_CHART
indexing
	created: "2011-11-30";
	revised: "2011-11-30"
explanation
	"Description of core system processes, and how they interact. Important for understanding the system arcitechture."
scenario "USER REQUEST FOR INFORMATION"
	description "The user enters citizen's CPR-number. This is sent to the server, that gives back data regarding his/her voting status. The voting status can be: 'Information not available yet', 'You are not eligible to vote', You are eligible to vote, your voter card should arrive in X days', 'You have voted', 'The election is over, you have voted' or 'The election is over you have not voted'"
scenario "COLLECT DATA"
	description "We just generate mock-up data."
scenario "INITIALIZE ELECTION DAY"
	description "At the start of the election day, the local database at every election venue must be sync'ed to match the central database. The digital voter list system cannot be used before this process has succesfully completed."
scenario "PRINT VOTER CARDS"
	description "The printing system requests all data to be collected. For each voter in the database, the printing system generates and inserts a voter-card-id. For each voter in the database, the printing system retrieves the voter-card-id, name and address of the voter, and prints this information to the voter card, which is sent by mail."
scenario "SEND OUT EXTRA VOTER CARD"
	description "The printing system marks the old voter-card-id as invalid and generates a new voter-card-id for the citizen. For this citizen, the voter-card-id, name and address is retrieved from the database and printed to the voter card. The voter card is sent out by mail."
scenario "VALIDATION OF VOTERS WITH VOTER CARD"
	description "The voter-card-id is read through a bar-code. The voter-card-id is looked up in the central database. If the voter-card-id is not found in the database, an error message is returned. If the voter-card-id is marked as invalid in the database, the coresponding error-message is returned. If the voter-card-id is found in the central database and is valid, a security question and it's answer is returned to the election official. The security question can be refreshed by the election official. The voter must enter a simple personal information that is unknown to the election official (eg. last four digits in CPR-number), and the election official must validate the voter through the security question. If the entered, personal information can be validated in the central database, the election official has successfully validated the voter, the voter is eligible to vote and has not allready voted, the voter is marked as 'has voted' in the central database, and the voter-card-id is marked invalid. If the process fails at any point, the process can be retried. If the election official is suspicious about the voter, or the voter fails to enter his/her simple personal information 3 times, the voter must go to manual validation."
scenario "MANUAL REGISTRATION OF VOTER WITHOUT A VOTER CARD"
	description "The voters identity and eligibility to vote is manually validated by a trusted election official. The election official can look up information on the voter and his/her eligibility to vote via the voters CPR-number. If the voter is found eligible, the election official can send a request to the central database, for marking the voter as 'has voted', by entering his/her password. Only if the voter is eligible and has not allready voted, a confirmation is returned and the voter can be handed a ballot."
scenario "REGISTRATION OF VOTING"
	description "When a voter is registered as 'has voted', information is also kept regarding when this happened and who was the election representative in charge."
scenario "DATABASE PROXY"
	description "All requests from the voting venue goes through a database proxy unit at the voting venue. If the proxy can establish connection to the central database, the proper actions are performed there and mirrored in the local database. If a connection can't be established, the proper actions are performed in the local database and marked as unsynchronized, and synced to the central database as soon as the connection can again be established."
end

static_diagram CLASS_INTERFACES
component
  cluster ELECTION
  component
	class PERSON
		feature
			CprNumber : INTEGER
			Name : STRING
			Address : STRING
			PassportNumber : INTEGER
			PlaceOfBirth : DATE
		end
	class CITIZEN
	  inherit PERSON
		feature
			EligibleToVote : BOOLEAN
			HasVoted : BOOLEAN
			VotingStatus : STRING
			VoterCards : SET[VOTER_CARD]
			SecurityQuestion : QUIZ
			invariant
			CprNumber /= Void;
			--CprNumber must be valid
		end
	class USER
	  inherit PERSON
		feature
			Title : STRING
			Username : STRING
			Privileges : SET[STRING]
			ChangePassword : BOOLEAN
				-> pwd : STRING
			Authenticated : BOOLEAN
		end
	class VOTER_CARD
		feature
			ElectionEvent : ELECTION_EVENT
				ensure
					result /= Void
			end
			Citizen : CITIZEN
				ensure
					result /= Void
			end
			Voter_card : VOTER_CARD
				-> c : CITIZEN
				-> e : ELECTION_EVENT
				require
					c /= Void;
					e /= Void;
			end
			Id : STRING
				ensure
					result /= Void
			end
		end
	class ELECTION_EVENT
		feature
			ElectionEvent : ELECTION_EVENT
				-> d : DATE
				-> name : STRING
			require
				d /= Void
			ensure
				result /= Void
			end
			Name : STRING
			ensure
				result /= Void
			end
			Date : DATE
			ensure
				result /= Void
			end
		end
	class DATA_ACCESS_OBJECT
		feature
			SavePerson : BOOLEAN
				-> p : PERSON
			SaveUser : BOOLEAN
				-> u : USER
			SaveVoterCard : BOOLEAN
				-> v : VOTER_CARD
			FindPerson : SET[PERSON]
				-> p : PERSON
			FindUser : SET[USER]
				-> p : USER
			FindVoterCard : SET[VOTER_CARD]
				-> p : VOTER_CARD
			LoadPerson : PERSON
				-> id : INTEGER
			LoadUserById : USER
				-> id : INTEGER
			LoadUser : USER
				-> username : STRING
				-> password : STRING
			LoadVoterCardById : VOTER_CARD
				-> id : INTEGER
			LoadVoterCard : VOTER_CARD
				-> idkey : STRING
		end
	class DAO_MYSQL
		inherit DATA_ACCESS_OBJECT
		feature
			Create : DATA_ACCESS_OBJECT
				-> u : USER
		end
	class DAO_PERMISSION_PROXY
		inherit DATA_ACCESS_OBJECT
		feature
			Dao_Permission_Proxy : DAO_PERMISSION_PROXY
				-> u : USER
		end
	class DAO_FACTORY
		feature
			GetDAO : DATA_ACCESS_OBJECT
				-> u : USER
		end
  cluster UTILITIES
  component
	class DATABASE
	class BARCODE
		feature
			Barcode
				-> data : STRING
				require
					data /= Void;
			end
			Data : STRING
			ensure
				result /= Void;
			end
			Image : IMAGE		
			ensure
				result /= Void;
			end
			invariant
					1=1;	-- The data must not be longer than 10 charachters
					-- The data must be at least one charachter
		end
	class QUIZ
		feature
			Quiz: Void
			Question: STRING
			Answer: STRING
	end
  cluster ADMINISTRATION
  component
	class VOTER_CARD_PRINTER
		feature
			VoterCardPrinter: Void
			Print: Void
		end
	end
	class DATA_COLLECTOR 	-- Not designed yet...
	end
	class DATA_ANALYZER 	-- Not designed yet...
	end
end
  
static_diagram CLASS_RELATIONS
component
	USER inherit CITIZEN
	DATA_ACCESS_OBJECT client DATABASE
	CITIZEN client DATA_ACCESS_OBJECT
	VOTER_CARD client DATA_ACCESS_OBJECT
	ELECTION_EVENT client DATA_ACCESS_OBJECT
	DATA_COLLECTOR client DATA_ACCESS_OBJECT
	DATA_ANALYZER client DATA_ACCESS_OBJECT
	CITIZEN client VOTER_CARD
	CITIZEN client QUIZ
	VOTER_CARD client VOTER_CARD_PRINTER
	VOTER_CARD client ELECTION_EVENT
	VOTER_CARD_PRINTER client BARCODE
end