<documents created="2011-12-13 13:49:57Z"><document src="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[// -----------------------------------------------------------------------
// <copyright file="VoterDO.cs" company="DVL">
// <author>Jan Meier</author>
// </copyright>
// -----------------------------------------------------------------------

namespace DBComm.DBComm.DO
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Diagnostics.Contracts;


    /// <summary>
    /// The class representing a Voter entity
    /// </summary>
    [Table(Name = "voter")]
    public class VoterDO : IDataObject
    {
        private uint? primaryKey;

        /// <summary>
        /// Initializes a new instance of the <see cref="VoterDO"/> class.
        /// </summary>
        /// <param name="pollingStationId">
        /// The polling station id.
        /// </param>
        /// <param name="cpr">
        /// The cpr no.
        /// </param>
        /// <param name="name">
        /// The name.
        /// </param>
        /// <param name="address">
        /// The address.
        /// </param>
        /// <param name="city">
        /// The city.
        /// </param>
        /// <param name="cardPrinted">
        /// The card printed status.
        /// </param>
        /// <param name="voted">
        /// The voted status.
        /// </param>
        public VoterDO(uint? pollingStationId, uint? cpr, string name, string address, string city, bool? cardPrinted, bool? voted)
        {
            Contract.Requires(cpr == null || (cpr >= 101000001 && cpr <= 3112999999));

            this.PollingStationId = pollingStationId;
            this.primaryKey = cpr;
            this.Name = name;
            this.Address = address;
            this.City = city;
            this.CardPrinted = cardPrinted;
            this.Voted = voted;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VoterDO"/> class. 
        /// Parameter-less constructor required for entity mapping. No field-
        /// initialization is done, i.e. all fields are null.
        /// </summary>
        public VoterDO()
        {
        }

        /// <summary>
        /// Gets PrimaryKey.
        /// </summary>
        [Column(IsPrimaryKey = true, Name = "cpr")]
        public uint? PrimaryKey
        {
            get
            ]]></source>
</chunk>
<method name="get_PrimaryKey" namespace="DBComm.DBComm.DO" type="DBComm.DBComm.DO.VoterDO" typeName="VoterDO" token="6000040" module="DBComm.exe"><hits><hit index="0" value="6"/>
<hit index="1" value="6"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="6" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="usercodeundertest"><source><![CDATA[return this.primaryKey;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="000d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            private set
            ]]></source>
</chunk>
<chunk hits="1" offset="0080" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<method name="set_PrimaryKey" namespace="DBComm.DBComm.DO" type="DBComm.DBComm.DO.VoterDO" typeName="VoterDO" token="6000041" module="DBComm.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="18" value="1"/>
<hit index="20" value="1"/>
<hit index="21" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="13" total="14" coveredRatio="0.9285714285714286"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[Contract.Requires(value >= 101000001 && value <= 3112999999);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0081" domain="usercodeundertest"><source><![CDATA[this.primaryKey = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0088" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        /// <summary>
        /// Gets Cpr as a string.
        /// </summary>
        [Pure]
        public string CprString
        {
            get
            {
                Contract.Requires(PrimaryKey != null);
                Contract.Ensures(Contract.Result<string>().Length == 10);

                string result = this.PrimaryKey.ToString();

                if (result.Length < 10)
                {
                    return "0" + result;
                }

                return result;
            }
        }

        /// <summary>
        /// Gets the id of the polling station this voter is associated with.
        /// </summary>
        [Column]
        public uint? PollingStationId { get; private set; }

        /// <summary>
        /// Gets Name.
        /// </summary>
        [Column]
        public string Name { get; private set; }

        /// <summary>
        /// Gets Address.
        /// </summary>
        [Column]
        public string Address { get; private set; }

        /// <summary>
        /// Gets City.
        /// </summary>
        [Column]
        public string City { get; private set; }

        /// <summary>
        /// Gets a value indicating whether a card has been printed for this voter.
        /// </summary>
        [Column]
        public bool? CardPrinted { get; private set; }

        /// <summary>
        /// Gets a value indicating whether this voter has voted.
        /// </summary>
        [Column]
        public bool? Voted { get; set; }

        private EntityRef<PollingStationDO> _pollingStation;

        /// <summary>
        /// Gets or sets PollingStation associated with this voter..
        /// </summary>
        [Association(Name = "FK_V_PS", Storage = "_pollingStation", ThisKey = "PollingStationId")]
        public PollingStationDO PollingStation
        {
            get
            {
                return _pollingStation.Entity;
            }

            private set
            {
                Contract.Requires(value != null);
                _pollingStation.Entity = value;
            }
        }

        /// <summary>
        /// Reset all associations.
        /// </summary>
        public void ResetAssociations()
        {
            this._pollingStation = new EntityRef<PollingStationDO>();
        }

        /// <summary>
        /// Is the object fully initialized, i.e. do all fields have non-null values?
        /// </summary>
        /// <returns>True if no fields are null.</returns>
        public bool FullyInitialized()
        {
            return PollingStationId != null && PrimaryKey != null && Name != null && Address != null && CardPrinted != null
                   && Voted != null;
        }

        /// <summary>
        /// Set the values of this object to the values of the dummy object, if the dummys value is non-null.
        /// </summary>
        /// <param name="dummy">
        /// The dummy object, representing new values.
        /// </param>
        public void UpdateValues(IDataObject dummy)
        ]]></source>
</chunk>
<chunk hits="2" offset="011c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<method name="UpdateValues" namespace="DBComm.DBComm.DO" type="DBComm.DBComm.DO.VoterDO" typeName="VoterDO" token="6000053" module="DBComm.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="2"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="2"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
<hit index="20" value="1"/>
<hit index="21" value="1"/>
<hit index="22" value="1"/>
<hit index="23" value="1"/>
<hit index="24" value="1"/>
<hit index="25" value="2"/>
<hit index="26" value="1"/>
<hit index="27" value="1"/>
<hit index="28" value="1"/>
<hit index="29" value="1"/>
<hit index="30" value="1"/>
<hit index="31" value="1"/>
<hit index="32" value="1"/>
<hit index="33" value="1"/>
<hit index="34" value="1"/>
<hit index="35" value="1"/>
<hit index="36" value="2"/>
<hit index="37" value="1"/>
<hit index="38" value="1"/>
<hit index="39" value="1"/>
<hit index="40" value="1"/>
<hit index="41" value="1"/>
<hit index="42" value="1"/>
<hit index="43" value="1"/>
<hit index="44" value="1"/>
<hit index="45" value="1"/>
<hit index="46" value="1"/>
<hit index="47" value="1"/>
<hit index="48" value="1"/>
<hit index="49" value="2"/>
<hit index="50" value="1"/>
<hit index="51" value="1"/>
<hit index="52" value="1"/>
<hit index="53" value="1"/>
<hit index="54" value="1"/>
<hit index="55" value="1"/>
<hit index="56" value="1"/>
<hit index="59" value="1"/>
<hit index="62" value="1"/>
<hit index="64" value="1"/>
<hit index="65" value="1"/>
<hit index="66" value="1"/>
<hit index="67" value="1"/>
<hit index="68" value="1"/>
<hit index="69" value="1"/>
<hit index="70" value="1"/>
<hit index="71" value="1"/>
<hit index="72" value="2"/>
<hit index="73" value="1"/>
<hit index="74" value="1"/>
<hit index="75" value="1"/>
<hit index="76" value="1"/>
<hit index="77" value="1"/>
<hit index="78" value="1"/>
<hit index="79" value="1"/>
<hit index="80" value="1"/>
<hit index="82" value="1"/>
<hit index="83" value="1"/>
<hit index="84" value="1"/>
<hit index="85" value="1"/>
<hit index="86" value="1"/>
<hit index="87" value="1"/>
<hit index="88" value="2"/>
<hit index="89" value="1"/>
<hit index="90" value="1"/>
<hit index="91" value="1"/>
<hit index="92" value="1"/>
<hit index="93" value="1"/>
<hit index="94" value="1"/>
<hit index="95" value="1"/>
<hit index="96" value="1"/>
<hit index="98" value="1"/>
<hit index="99" value="1"/>
<hit index="100" value="1"/>
<hit index="101" value="1"/>
<hit index="102" value="1"/>
<hit index="103" value="1"/>
<hit index="104" value="2"/>
<hit index="105" value="1"/>
<hit index="106" value="1"/>
<hit index="107" value="1"/>
<hit index="108" value="1"/>
<hit index="109" value="1"/>
<hit index="110" value="1"/>
<hit index="111" value="1"/>
<hit index="112" value="1"/>
<hit index="113" value="2"/>
<hit index="114" value="1"/>
<hit index="115" value="1"/>
<hit index="116" value="1"/>
<hit index="117" value="1"/>
<hit index="118" value="1"/>
<hit index="119" value="1"/>
<hit index="120" value="1"/>
<hit index="121" value="1"/>
<hit index="122" value="2"/>
<hit index="123" value="1"/>
<hit index="124" value="1"/>
<hit index="125" value="1"/>
<hit index="126" value="1"/>
<hit index="127" value="1"/>
<hit index="128" value="1"/>
<hit index="129" value="1"/>
<hit index="130" value="1"/>
<hit index="131" value="2"/>
<hit index="132" value="1"/>
<hit index="133" value="1"/>
<hit index="134" value="1"/>
<hit index="135" value="1"/>
<hit index="136" value="1"/>
<hit index="137" value="1"/>
<hit index="138" value="1"/>
<hit index="139" value="1"/>
<hit index="141" value="1"/>
<hit index="142" value="1"/>
<hit index="143" value="1"/>
<hit index="144" value="1"/>
<hit index="145" value="1"/>
<hit index="146" value="1"/>
<hit index="147" value="2"/>
<hit index="148" value="1"/>
<hit index="149" value="1"/>
<hit index="150" value="1"/>
<hit index="151" value="1"/>
<hit index="152" value="1"/>
<hit index="153" value="1"/>
<hit index="154" value="1"/>
<hit index="155" value="1"/>
<hit index="157" value="1"/>
<hit index="158" value="1"/>
<hit index="159" value="1"/>
<hit index="160" value="1"/>
<hit index="161" value="1"/>
<hit index="162" value="1"/>
<hit index="163" value="1"/>
<hit index="164" value="1"/>
<hit index="165" value="2"/>
<hit index="167" value="1"/>
<hit index="168" value="1"/>
<hit index="169" value="1"/>
<hit index="170" value="1"/>
<hit index="171" value="1"/>
<hit index="172" value="1"/>
<hit index="173" value="1"/>
<hit index="175" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="74" total="76" coveredRatio="0.97368421052631582"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[Contract.Requires(dummy != null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ // Re-stipulate this contract, since it must be checked before the added contracts.
            ]]></source>
</chunk>
<chunk hits="1" offset="002a" domain="usercodeundertest"><source><![CDATA[Contract.Requires(dummy.GetType() == this.GetType());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0047" domain="usercodeundertest"><source><![CDATA[Contract.Requires(dummy.PrimaryKey == null || (((VoterDO)dummy).PrimaryKey >= 101000001 && ((VoterDO)dummy).PrimaryKey <= 3012999999));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="011d" domain="usercodeundertest"><source><![CDATA[VoterDO voterDummy = dummy as VoterDO;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0124" domain="usercodeundertest"><source><![CDATA[Contract.Assert(voterDummy != null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="0137" domain="usercodeundertest"><source><![CDATA[this.PollingStationId = voterDummy.PollingStationId ?? this.PollingStationId;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0168" domain="usercodeundertest"><source><![CDATA[this.PrimaryKey = voterDummy.PrimaryKey ?? this.PrimaryKey;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0199" domain="usercodeundertest"><source><![CDATA[this.Name = voterDummy.Name ?? this.Name;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="01b3" domain="usercodeundertest"><source><![CDATA[this.City = voterDummy.City ?? this.City;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="01cd" domain="usercodeundertest"><source><![CDATA[this.Address = voterDummy.Address ?? this.Address;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="01e7" domain="usercodeundertest"><source><![CDATA[this.CardPrinted = voterDummy.CardPrinted ?? this.CardPrinted;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0218" domain="usercodeundertest"><source><![CDATA[this.Voted = voterDummy.Voted ?? this.Voted;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0249" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        [ContractInvariantMethod]
        private void Invariant()
        ]]></source>
</chunk>
<method name="$InvariantMethod$" namespace="DBComm.DBComm.DO" type="DBComm.DBComm.DO.VoterDO" typeName="VoterDO" token="6000056" module="DBComm.exe"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
<hit index="25" value="1"/>
<hit index="26" value="1"/>
<hit index="30" value="1"/>
<hit index="33" value="1"/>
<hit index="34" value="1"/>
<hit index="36" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="14" total="19" coveredRatio="0.73684210526315785"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0013" domain="usercodeundertest"><source><![CDATA[Contract.Invariant((this.PrimaryKey >= 101000001 && this.PrimaryKey <= 3112999999) || this.PrimaryKey == null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            var other = obj as VoterDO;

            return other.PrimaryKey == this.PrimaryKey && other.Name == this.Name && other.PollingStationId == this.PollingStationId
                   && other.Address == this.Address && other.City == this.City && other.Voted == this.Voted && other.CardPrinted == this.CardPrinted;
        }

        // override object.GetHashCode
        public override int GetHashCode()
        {
            var result = 0;
            if (this.Name != null) result += this.Name.GetHashCode();

            return result;
        }
    }
}
]]></source>
</chunk>
</document>
<document src="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\IDataObjectContracts.cs" renderPrefix="s1"><chunk hits="-1" domain="unknown"><source><![CDATA[// -----------------------------------------------------------------------
// <copyright file="IDataObjectContracts.cs" company="">
// TODO: Update copyright text.
// </copyright>
// -----------------------------------------------------------------------

namespace DBComm.DBComm.DO
{
    using System.Diagnostics.Contracts;

    [ContractClassFor(typeof(IDataObject))]
    abstract class IDataObjectContracts : IDataObject
    {
        #region Implementation of IDataObject

        public uint? PrimaryKey
        {
            get
            {
                throw new System.NotImplementedException();
            }
        }

        [Pure]
        bool IDataObject.FullyInitialized()
        {
            return false;
        }

        void IDataObject.UpdateValues(IDataObject dummy)
        {
            ]]></source>
</chunk>
<chunk hits="1" offset="00cb" domain="usercodeundertest"><source><![CDATA[Contract.Requires(dummy != null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00de" domain="usercodeundertest"><source><![CDATA[Contract.Requires(dummy.GetType() == this.GetType());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        void IDataObject.ResetAssociations()
        {
        }

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\PollingStationDO.cs" renderPrefix="s2"><chunk hits="-1" domain="unknown"><source><![CDATA[// -----------------------------------------------------------------------
// <copyright file="PollingStationDO.cs" company="DVL">
// <author>Jan Meier</author>
// </copyright>
// -----------------------------------------------------------------------

namespace DBComm.DBComm.DO
{
    using System.Collections.Generic;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Diagnostics.Contracts;

    /// <summary>
    /// The class representing a Polling station entity
    /// </summary>
    [Table(Name = "pollingstation")]
    public class PollingStationDO : IDataObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PollingStationDO"/> class.
        /// </summary>
        /// <param name="municipalityId">
        /// The municipality Id.
        /// </param>
        /// <param name="id">
        /// The id.
        /// </param>
        /// <param name="name">
        /// The name.
        /// </param>
        /// <param name="address">
        /// The address.
        /// </param>
        ]]></source>
</chunk>
<chunk hits="0" offset="0017" domain="userortestcode"><source><![CDATA[public PollingStationDO(uint? municipalityId, uint? id, string name, string address)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="0" offset="001e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="001f" domain="userortestcode"><source><![CDATA[this.MunicipalityId = municipalityId;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0027" domain="userortestcode"><source><![CDATA[this.PrimaryKey = id;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002f" domain="userortestcode"><source><![CDATA[this.Name = name;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0037" domain="userortestcode"><source><![CDATA[this.Address = address;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="0" offset="0040" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// Initializes a new instance of the <see cref="PollingStationDO"/> class. 
        /// Parameter-less constructor required for entity mapping. No field-
        /// initialization is done, i.e. all fields are null.
        /// </summary>
        public PollingStationDO()
        {
        }

        /// <summary>
        /// Gets Primary Key.
        /// </summary>
        [Column(Name = "id", IsPrimaryKey = true)]
        public uint? PrimaryKey { get; private set; }

        /// <summary>
        /// Gets the foreign key referencing a municipality.
        /// </summary>
        [Column]
        public uint? MunicipalityId { get; private set; }

        /// <summary>
        /// Gets Name.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets Address.
        /// </summary>
        [Column]
        public string Address { get; private set; }

        ]]></source>
</chunk>
<method name=".ctor" namespace="DBComm.DBComm.DO" type="DBComm.DBComm.DO.PollingStationDO" typeName="PollingStationDO" token="6000068" module="DBComm.exe"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="7" coveredRatio="0"/>
</method>
<chunk hits="0" offset="0000" domain="userortestcode"><source><![CDATA[private EntityRef<MunicipalityDO> _municipality = new EntityRef<MunicipalityDO>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// Gets or sets Municipality associated with tihs polling station.
        /// </summary>
        [Association(Name = "FK_PT_M", IsForeignKey = true, Storage = "_municipality", ThisKey = "MunicipalityId")]
        public MunicipalityDO Municipality
        {
            get
            {
                return _municipality.Entity;
            }

            private set
            {
                Contract.Requires(value != null);
                _municipality.Entity = value;
            }
        }

        ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[private EntitySet<VoterDO> _voters = new EntitySet<VoterDO>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// Gets or sets Voters associated with this polling station.
        /// </summary>
        [Association(Name = "FK_V_PS", Storage = "_voters", ThisKey = "PrimaryKey", OtherKey = "PollingStationId")]
        public ICollection<VoterDO> Voters
        {
            get
            {
                return _voters;
            }

            private set
            {
                Contract.Requires(value != null);
                _voters.AddRange(value);
            }
        }

        /// <summary>
        /// Has all the fields of the object been initialized?
        /// </summary>
        /// <returns>
        /// True if all fields are non-null.
        /// </returns>
        public bool FullyInitialized()
        {
            return this.Address != null && this.PrimaryKey != null && this.MunicipalityId != null && this.Name != null;
        }

        /// <summary>
        /// Set the values of this object to the values of the dummy object, if the dummys value is non-null.
        /// </summary>
        /// <param name="dummy">
        /// The dummy object, representing new values.
        /// </param>
        public void UpdateValues(IDataObject dummy)
        {
            PollingStationDO pollingDummy = dummy as PollingStationDO;
            Contract.Assert(pollingDummy != null);

            this.Address = pollingDummy.Address ?? this.Address;
            this.PrimaryKey = pollingDummy.PrimaryKey ?? this.PrimaryKey;
            this.MunicipalityId = pollingDummy.MunicipalityId ?? this.MunicipalityId;
            this.Name = pollingDummy.Name ?? this.Name;
        }

        public void ResetAssociations()
        {
            this._municipality = new EntityRef<MunicipalityDO>();
            this._voters = new EntitySet<VoterDO>();
        }

        public override string ToString()
        {
            return this.Name ?? string.Empty;
        }

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            var other = obj as PollingStationDO;

            return other.PrimaryKey == this.PrimaryKey && other.Address == this.Address && other.MunicipalityId == this.MunicipalityId
                   && other.Name == this.Name;
        }

        // override object.GetHashCode
        public override int GetHashCode()
        {
            if (Name != null)
                return this.Name.GetHashCode();

            return 0;
        }
    }
}]]></source>
</chunk>
</document>
<document src="(no sources available for some parts of DBComm.Explorables, DBComm, DBComm.Tests, System.Data.Linq)" missing="true"><method name="Create" type="DBComm.DBComm.DO.VoterDOFactory" token="6000002" module="&lt;In Memory Module&gt;"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="11" coveredRatio="0"/>
</method>
<method name="Invariant" type="System.Diagnostics.Contracts.__ContractsRuntime" token="60000a4" module="DBComm.exe"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="3" coveredRatio="0.66666666666666663"/>
</method>
<method name="UpdateValues" type="DBComm.DBComm.DO.VoterDOTest" token="6000007" module="&lt;In Memory Module&gt;"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="Requires" type="System.Diagnostics.Contracts.__ContractsRuntime" token="60000a1" module="DBComm.exe"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<method name="ReportFailure" type="System.Diagnostics.Contracts.__ContractsRuntime" token="600009f" module="DBComm.exe"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="TriggerFailure" type="System.Diagnostics.Contracts.__ContractsRuntime" token="60000a0" module="DBComm.exe"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name=".ctor" type="System.Diagnostics.Contracts.__ContractsRuntime+ContractException" token="60000b0" module="DBComm.exe"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="Assert" type="System.Diagnostics.Contracts.__ContractsRuntime" token="60000a3" module="DBComm.exe"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="3" coveredRatio="0.66666666666666663"/>
</method>
<method name="get_PollingStationId" type="DBComm.DBComm.DO.VoterDO" token="6000043" module="DBComm.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="set_PollingStationId" type="DBComm.DBComm.DO.VoterDO" token="6000044" module="DBComm.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="Create" type="DBComm.DBComm.DO.PollingStationDOFactory" token="6000006" module="&lt;In Memory Module&gt;"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="2" coveredRatio="0"/>
</method>
<method name=".ctor" type="System.Data.Linq.EntitySet`1" token="6000d03" module="System.Data.Linq.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="2" coveredRatio="0"/>
</method>
<method name="set_MunicipalityId" type="DBComm.DBComm.DO.PollingStationDO" token="600006d" module="DBComm.exe"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="1" coveredRatio="0"/>
</method>
<method name="set_PrimaryKey" type="DBComm.DBComm.DO.PollingStationDO" token="600006b" module="DBComm.exe"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="1" coveredRatio="0"/>
</method>
<method name="set_Name" type="DBComm.DBComm.DO.PollingStationDO" token="600006f" module="DBComm.exe"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="1" coveredRatio="0"/>
</method>
<method name="set_Address" type="DBComm.DBComm.DO.PollingStationDO" token="6000071" module="DBComm.exe"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="1" coveredRatio="0"/>
</method>
<method name="get_Name" type="DBComm.DBComm.DO.VoterDO" token="6000045" module="DBComm.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="set_Name" type="DBComm.DBComm.DO.VoterDO" token="6000046" module="DBComm.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="get_City" type="DBComm.DBComm.DO.VoterDO" token="6000049" module="DBComm.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="set_City" type="DBComm.DBComm.DO.VoterDO" token="600004a" module="DBComm.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="get_Address" type="DBComm.DBComm.DO.VoterDO" token="6000047" module="DBComm.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="set_Address" type="DBComm.DBComm.DO.VoterDO" token="6000048" module="DBComm.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="get_CardPrinted" type="DBComm.DBComm.DO.VoterDO" token="600004b" module="DBComm.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="set_CardPrinted" type="DBComm.DBComm.DO.VoterDO" token="600004c" module="DBComm.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="get_Voted" type="DBComm.DBComm.DO.VoterDO" token="600004d" module="DBComm.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="set_Voted" type="DBComm.DBComm.DO.VoterDO" token="600004e" module="DBComm.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
</document>
</documents>
