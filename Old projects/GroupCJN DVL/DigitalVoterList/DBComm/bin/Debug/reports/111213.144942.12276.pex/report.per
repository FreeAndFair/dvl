<?xml version="1.0" encoding="utf-8"?>
<pex id="{86d6642f-5ea3-4034-b307-cb84f0805a7c}" creationTime="2011-12-13 13:49:42Z" configuration="DBComm.DBComm.DO!\VoterDO!\*" created="2011-12-13 13:49:42Z" pexVersion="0.94.51006.1" xml="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\reports\111213.144942.12276.pex\report.per" html="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\reports\111213.144942.12276.pex\report.html"><environment commandLine="&quot;C:\Program Files (x86)\Microsoft Pex\bin\Microsoft.Pex.x86.exe&quot; &quot;C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe&quot; /namespacefilter:DBComm.DBComm.DO! /typefilter:VoterDO! /assemblyresolutiondirectories:&quot;c:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\PublicAssemblies&quot; /explorationreflectionmode:LazyWizard /instrumentedassemblies:MySql.Data /targetx86 /x64failsilently /clrversion:v4.0.30319 /donotopenreport /reportlevel:Xml /reportrootpath:&quot;C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\reports&quot; /testassemblyname:DBComm.Tests /testframework:VisualStudioUnitTest /testlanguage:cs /testprojectfile:&quot;C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm.csproj&quot; /testprojectnotupdate /testprojectskip" machineName="JMEI-THINK" osVersion="Microsoft Windows NT 6.1.7601 Service Pack 1" processorCount="4" clrVersion="4.0.30319.239" bitness="x86" user="jmei"><envVars><envVar name="HOMEPATH" value="\Users\jmei"/>
<envVar name="PUBLIC" value="C:\Users\Public"/>
<envVar name="COMPUTERNAME" value="JMEI-THINK"/>
<envVar name="CLRMONITOR_INJECT_TYPES" value=""/>
<envVar name="COMPLUS_ProfAPI_ProfilerCompatibilitySetting" value="EnableV2Profiler"/>
<envVar name="CommonProgramFiles(x86)" value="C:\Program Files (x86)\Common Files"/>
<envVar name="configsetroot" value="C:\Windows\ConfigSetRoot"/>
<envVar name="PROCESSOR_IDENTIFIER" value="Intel64 Family 6 Model 42 Stepping 7, GenuineIntel"/>
<envVar name="APPDATA" value="C:\Users\jmei\AppData\Roaming"/>
<envVar name="TFS_DIR" value="C:\Program Files\ThinkVantage Fingerprint Software\"/>
<envVar name="TMP" value="C:\Users\jmei\AppData\Local\Temp"/>
<envVar name="MOZ_PLUGIN_PATH" value="C:\Program Files (x86)\Foxit Software\Foxit Reader\plugins\"/>
<envVar name="SWSHARE" value="C:\SWSHARE"/>
<envVar name="PROCESSOR_REVISION" value="2a07"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES_EXCLUSIONS" value=""/>
<envVar name="PATHEXT" value=".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.RB;.RBW"/>
<envVar name="TRACKER_ATTACHED" value="1"/>
<envVar name="COMPLUS_DEFAULTVERSION" value="v4.0.30319"/>
<envVar name="CLRMONITOR_CLSID" value="{21bbb412-71ac-41f9-a377-48529a4859cf}"/>
<envVar name="COMMPath" value="C:\Program Files\Lenovo\Communications Utility"/>
<envVar name="TEMP" value="C:\Users\jmei\AppData\Local\Temp"/>
<envVar name="LOCALAPPDATA" value="C:\Users\jmei\AppData\Local"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES_EXCLUSIONS" value=""/>
<envVar name="CLRMONITOR_PROTECT_TYPES" value="Microsoft.FSharp.Text.Printf,Microsoft.FSharp.Text.PrintfImpl"/>
<envVar name="GIT_SSH" value="C:\Program Files (x86)\GitExtensions\PuTTY\plink.exe"/>
<envVar name="CLRMONITOR_INJECT_ASSEMBLIES" value=""/>
<envVar name="ProgramData" value="C:\ProgramData"/>
<envVar name="CLRMONITOR_INITIALIZED" value="0x10"/>
<envVar name="USERDOMAIN" value="jmei-THINK"/>
<envVar name="windir" value="C:\Windows"/>
<envVar name="CLRMONITOR_ERASE_FINALIZER_TYPES" value=""/>
<envVar name="CLRMONITOR_INJECT_NAMESPACES" value=""/>
<envVar name="NUMBER_OF_PROCESSORS" value="4"/>
<envVar name="Path" value="C:\Ruby193\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\ThinkPad\Bluetooth Software\;C:\Program Files\ThinkPad\Bluetooth Software\syswow64;C:\Program Files\Broadcom\WHL\;C:\Program Files\Broadcom\WHL\syswow64;C:\Program Files\Broadcom\WHL\SysWow64\;C:\Program Files\Broadcom\WHL\SysWow64\syswow64;C:\Program Files (x86)\Common Files\Lenovo;C:\Program Files (x86)\Lenovo\Access Connections\;C:\SWTOOLS\ReadyApps;c:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\DTS\Binn\;C:\Program Files\Intel\WiFi\bin\;C:\Program Files\Common Files\Intel\WirelessCommon\;C:\Program Files (x86)\Intel\Services\IPT\;C:\Program Files\Intel\WiFi\bin\;C:\Program Files\Common Files\Intel\WirelessCommon\"/>
<envVar name="ALCKPath" value="C:\Program Files\Lenovo\AutoLock"/>
<envVar name="TVT" value="C:\Program Files (x86)\Lenovo"/>
<envVar name="ProgramFiles(x86)" value="C:\Program Files (x86)"/>
<envVar name="PROCESSOR_LEVEL" value="6"/>
<envVar name="PROCESSOR_ARCHITEW6432" value="AMD64"/>
<envVar name="CommonProgramFiles" value="C:\Program Files (x86)\Common Files"/>
<envVar name="CLRMONITOR_FLAGS" value=""/>
<envVar name="pex_instrumentation" value="1"/>
<envVar name="SESSIONNAME" value="Console"/>
<envVar name="asl.log" value="Destination=file"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES" value="System.Array,System.Array+ArrayEnumerator,System.Array+FunctorComparer`1,System.Array+SZArrayEnumerator,System.Array+SorterGenericArray,System.Array+SorterObjectArray,System.Boolean,System.Byte,System.Char,System.CharEnumerator,System.ComponentModel.Component,System.ComponentModel.Container,System.ComponentModel.Container+Site,System.Convert,System.Currency,System.DateTime,System.Decimal,System.Diagnostics.Assert,System.Double,System.Globalization.CharUnicodeInfo,System.Globalization.CultureTableRecord,System.Globalization.TextInfo,System.Guid,System.IO.MemoryStream,System.IO.Stream,System.IO.StreamReader,System.IO.StreamWriter,System.IO.StringReader,System.IO.StringWriter,System.Int16,System.Int32,System.Int64,System.Lazy`1,System.Lazy`1+Boxed,System.Lazy`1+LazyInternalExceptionHolder,System.Math,System.Nullable,System.Nullable`1,System.OrdinalComparer,System.SByte,System.SZArrayHelper,System.SZArrayHelper+SZGenericArrayEnumerator`1,System.Single,System.String,System.StringComparer,System.Text.ASCIIEncoding,System.Text.DecoderNLS,System.Text.Encoding,System.Text.UTF8Encoding,System.TimeSpan,System.Tuple,System.Tuple`1,System.Tuple`2,System.Tuple`3,System.Tuple`4,System.Tuple`5,System.Tuple`6,System.Tuple`7,System.Tuple`8,System.UInt16,System.UInt32,System.UInt64,System.Xml.XmlTextWriter,System.Xml.XmlTextWriter+Namespace,System.Xml.XmlTextWriter+NamespaceState,System.Xml.XmlTextWriter+SpecialAttr,System.Xml.XmlTextWriter+State,System.Xml.XmlTextWriter+TagInfo,System.Xml.XmlTextWriter+Token,System.Xml.XmlWriter,__Box`1,__SzArrayHelper`1"/>
<envVar name="PSModulePath" value="C:\Windows\system32\WindowsPowerShell\v1.0\Modules\"/>
<envVar name="ACPath" value="C:\Program Files (x86)\Lenovo\Access Connections\"/>
<envVar name="ProgramW6432" value="C:\Program Files"/>
<envVar name="ProgramFiles" value="C:\Program Files (x86)"/>
<envVar name="CLRMONITOR_ERASE_CCTOR_TYPES" value=""/>
<envVar name="FP_NO_HOST_CHECK" value="NO"/>
<envVar name="pex_clientid" value="pex10876_1"/>
<envVar name="CodedUITestCurrentBrowser" value="IE"/>
<envVar name="SystemRoot" value="C:\Windows"/>
<envVar name="CLRMONITOR_INSTRUMENT_ATTRIBUTE" value="Microsoft.Moles.Framework.Moles.MolesInstrumentAttribute"/>
<envVar name="CLRMONITOR_PROTECT_ALL_CCTORS" value="1"/>
<envVar name="CommonProgramW6432" value="C:\Program Files\Common Files"/>
<envVar name="LOGONSERVER" value="\\JMEI-THINK"/>
<envVar name="READYAPPS" value="C:\SWTOOLS\ReadyApps"/>
<envVar name="USERPROFILE" value="C:\Users\jmei"/>
<envVar name="VisualStudioDir" value="C:\Users\jmei\Documents\Visual Studio 2010"/>
<envVar name="CLRMONITOR_SUBSTITUTIONS" value="C:\Windows\assembly\GAC_MSIL\Microsoft.ExtendedReflection\0.94.0.0__31bf3856ad364e35\Microsoft.ExtendedReflection.dll"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES_EXCLUSIONS" value=""/>
<envVar name="CodeContractsInstallDir" value="C:\Program Files (x86)\Microsoft\Contracts\"/>
<envVar name="HOMEDRIVE" value="C:"/>
<envVar name="TVTCOMMON" value="C:\Program Files (x86)\Common Files\Lenovo"/>
<envVar name="ComSpec" value="C:\Windows\system32\cmd.exe"/>
<envVar name="VS100COMNTOOLS" value="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\Tools\"/>
<envVar name="USERNAME" value="jmei"/>
<envVar name="COR_PROFILER" value="{21bbb412-71ac-41f9-a377-48529a4859cf}"/>
<envVar name="PROCESSOR_ARCHITECTURE" value="x86"/>
<envVar name="pex_server_channel" value="pex10876"/>
<envVar name="OS" value="Windows_NT"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES" value="System.Collections,System.Collections.Generic,System.Collections.ObjectModel,System.Collections.Specialized,System.Diagnostics.Contracts"/>
<envVar name="SystemDrive" value="C:"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES" value="DBComm,DBComm.Tests,FSharp.Core,FSharp.PowerPack,Microsoft.Contracts,Microsoft.VisualBasic,Microsoft.VisualStudio.QualityTools.UnitTestFramework,MySql.Data,System,System.Core,System.Data,System.Data.Linq,System.Web"/>
<envVar name="ALLUSERSPROFILE" value="C:\ProgramData"/>
</envVars>
</environment>
<settings/>
<reflection/>
<assembly name="DBComm" version="1.0.0.0" fileVersion="1.0.0.0" fullName="DBComm, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe" fileName="DBComm.exe"><settings testFramework="VisualStudioUnitTest" testLanguage="cs"/>
<dump category="Tests" title="Build default assembly set for new project"><dtTree><dtTreeNode text="Build default assembly set for new project"><dtTextNode><rstring contentMode="memory"><![CDATA[visibility: exported and assembly(DBComm)
Processing 21 types
Processing DBComm
Scanning assembly references in DBComm
Applying template AssemblyInfo to DBComm
generating method bodies
flushing generated code
updating assembly references
]]></rstring>
</dtTextNode>
</dtTreeNode>
</dtTree>
</dump>
<fixture name="VoterDOTest" type="DBComm.DBComm.DO.VoterDOTest" typeName="VoterDOTest" token="2000002" href="fix\DBComm.Tests.530.html"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
<settings typeUnderTest="DBComm.DBComm.DO.VoterDO"/>
<exploration shortName="Constructor(Nullable`1&lt;UInt32&gt;, Nullable`1&lt;UInt32&gt;, String, String, String, Nullable`1&lt;Boolean&gt;, Nullable`1&lt;Boolean&gt;)" fullName="DBComm.DBComm.DO.VoterDOTest.Constructor(Nullable`1&lt;UInt32&gt;, Nullable`1&lt;UInt32&gt;, String, String, String, Nullable`1&lt;Boolean&gt;, Nullable`1&lt;Boolean&gt;)" isDynamicCode="true"><method><definition assemblyName="DBComm.Tests" name="Constructor" token="6000001"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="pollingStationId" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="cpr" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="name" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="address" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="city" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="cardPrinted" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="voted" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</definition>
</method>
<target><methodDefinition assemblyName="DBComm" name=".ctor" token="600003e"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="pollingStationId" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="cpr" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="name" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="address" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="city" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="cardPrinted" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="voted" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
</methodDefinition>
</target>
<memberUnderTest assemblyName="DBComm" name=".ctor" token="600003e"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="pollingStationId" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="cpr" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="name" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="address" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="city" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="cardPrinted" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="voted" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
</memberUnderTest>
<test name="Constructor" state="success" duration="0,43"/>
<generatedTest id="a1cff85e-239e-4733-b856-458f1f83a07d" index="1" run="1" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="Constructor365"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="36" dtot="56" acov="36" atot="56"/>
<rcov name="asserts" dcov="1" dtot="1" acov="1" atot="1"/>
<value name="pollingStationId">null</value>
<value name="cpr">null</value>
<value name="name">null</value>
<value name="address">null</value>
<value name="city">null</value>
<value name="cardPrinted">true</value>
<value name="voted">true</value>
<value name="result">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[VoterDO voterDO;
voterDO = this.Constructor(default(uint?), default(uint?), (string)null, 
                           (string)null, (string)null, new bool?(true), new bool?(true));
Assert.IsNotNull((object)voterDO);
Assert.IsNull((object)(voterDO.PrimaryKey));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void Constructor365()
{
    VoterDO voterDO;
    voterDO = this.Constructor(default(uint?), default(uint?), (string)null, 
                               (string)null, (string)null, new bool?(true), new bool?(true));
    Assert.IsNotNull((object)voterDO);
    Assert.IsNull((object)(voterDO.PrimaryKey));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathCondition><![CDATA[return cpr.value < 101000001u && cpr.hasValue == false;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:45Z" category="coverage" message="coverage increased from 0 to 36 blocks (+36) after flipping DBComm.DBComm.DO.VoterDO..ctor at 0x0007"/>
<test name="Constructor" state="success" duration="0,01"/>
<generatedTest id="cd773595-6744-43bf-8e79-8faef18f80db" index="2" run="2" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="Constructor36501"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="38" atot="56"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="pollingStationId">null</value>
<value name="cpr">null</value>
<value name="name">null</value>
<value name="address">null</value>
<value name="city">null</value>
<value name="cardPrinted">true</value>
<value name="voted">true</value>
<value name="result">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[VoterDO voterDO;
voterDO = this.Constructor(default(uint?), default(uint?), (string)null, 
                           (string)null, (string)null, new bool?(true), new bool?(true));
Assert.IsNotNull((object)voterDO);
Assert.IsNull((object)(voterDO.PrimaryKey));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void Constructor36501()
{
    VoterDO voterDO;
    voterDO = this.Constructor(default(uint?), default(uint?), (string)null, 
                               (string)null, (string)null, new bool?(true), new bool?(true));
    Assert.IsNotNull((object)voterDO);
    Assert.IsNull((object)(voterDO.PrimaryKey));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathCondition><![CDATA[return 101000000u < cpr.value && cpr.hasValue == false;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:46Z" category="coverage" message="coverage increased from 36 to 38 blocks (+2) after flipping DBComm.DBComm.DO.VoterDO.$InvariantMethod$ at 0x0026"/>
<log level="message" time="2011-12-13 13:49:46Z" category="symbols" message="could not load symbols for C:\Windows\assembly\GAC_MSIL\Microsoft.Pex\0.94.0.0__31bf3856ad364e35\Microsoft.Pex.exe"/>
<log level="message" time="2011-12-13 13:49:46Z" category="symbols" message="search path: ;"/>
<test name="Constructor" state="success" duration="0,06"/>
<generatedTest id="5c19ea0b-bfb9-41c1-b0fa-7aa3a7910bdd" index="3" run="3" exceptionState="expected" status="expectedexception" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="ConstructorThrowsContractException904"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="4" dtot="0" acov="42" atot="56"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="pollingStationId">null</value>
<value name="cpr">0</value>
<value name="name">null</value>
<value name="address">null</value>
<value name="city">null</value>
<value name="cardPrinted">true</value>
<value name="voted">true</value>
<code><![CDATA[try
{
  VoterDO voterDO;
  voterDO = this.Constructor(default(uint?), new uint?(0u), (string)null, 
                             (string)null, (string)null, new bool?(true), new bool?(true));
  throw 
    new AssertFailedException("expected an exception of type ContractException");
}
catch(Exception ex)
{
  if (!PexContract.IsContractException(ex))
    throw ex;
}
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;System;Microsoft.Pex.Framework.Generated;Microsoft.Pex.Engine.Exceptions"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException904()
{
    try
    {
      VoterDO voterDO;
      voterDO = this.Constructor(default(uint?), new uint?(0u), (string)null, 
                                 (string)null, (string)null, new bool?(true), new bool?(true));
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<exceptionChain><exception typeDisplayName="ContractException" source="DBComm"><message><![CDATA[Precondition failed: cpr == null || (cpr >= 101000001 && cpr <= 3112999999)]]></message>
<type spec="Class"><definition assemblyName="DBComm" name="ContractException" token="2000021"><declaringType assemblyName="DBComm" name="__ContractsRuntime" token="2000014" namespace="System.Diagnostics.Contracts"/>
</definition>
</type>
<stackTrace><frame value="  at VoterDO..ctor(Nullable`1&lt;UInt32&gt;, Nullable`1&lt;UInt32&gt;, String, String, String, Nullable`1&lt;Boolean&gt;, Nullable`1&lt;Boolean&gt;) in C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs(48)" method="VoterDO..ctor(Nullable`1&lt;UInt32&gt;, Nullable`1&lt;UInt32&gt;, String, String, String, Nullable`1&lt;Boolean&gt;, Nullable`1&lt;Boolean&gt;)" offset="99" file="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" line="48"><method assemblyName="DBComm" name=".ctor" token="600003e"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="pollingStationId" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="cpr" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="name" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="address" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="city" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="cardPrinted" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="voted" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </param>
        public VoterDO(uint? pollingStationId, uint? cpr, string name, string address, string city, bool? cardPrinted, bool? voted)
        {]]></beforeSource>
<source><![CDATA[            Contract.Requires(cpr == null || (cpr >= 101000001 && cpr <= 3112999999));]]></source>
<afterSource><![CDATA[
            this.PollingStationId = pollingStationId;
            this.primaryKey = cpr;]]></afterSource>
</frame>
<frame value="  at VoterDOTest.Constructor(Nullable`1&lt;UInt32&gt;, Nullable`1&lt;UInt32&gt;, String, String, String, Nullable`1&lt;Boolean&gt;, Nullable`1&lt;Boolean&gt;)" method="VoterDOTest.Constructor(Nullable`1&lt;UInt32&gt;, Nullable`1&lt;UInt32&gt;, String, String, String, Nullable`1&lt;Boolean&gt;, Nullable`1&lt;Boolean&gt;)" offset="27"><method assemblyName="DBComm.Tests" name="Constructor" token="6000001"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="pollingStationId" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="cpr" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="name" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="address" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="city" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="cardPrinted" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="voted" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</method>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return cpr.hasValue != false && cpr.value < 101000001u;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:46Z" category="coverage" message="coverage increased from 38 to 42 blocks (+4) after flipping DBComm.DBComm.DO.VoterDO..ctor at 0x0007"/>
<test name="Constructor" state="success" duration="0,01"/>
<generatedTest id="07a4a0cc-b70a-4bef-897b-ecebc3af7637" index="4" run="4" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="Constructor194"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="12" dtot="0" acov="54" atot="56"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="pollingStationId">null</value>
<value name="cpr">101024648</value>
<value name="name">null</value>
<value name="address">null</value>
<value name="city">null</value>
<value name="cardPrinted">true</value>
<value name="voted">true</value>
<value name="result">new VoterDO{PrimaryKey=101024648,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=101024648,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[VoterDO voterDO;
voterDO = this.Constructor(default(uint?), new uint?(101024648u), (string)null, 
                           (string)null, (string)null, new bool?(true), new bool?(true));
Assert.IsNotNull((object)voterDO);
Assert.IsNotNull((object)(voterDO.PrimaryKey));
Assert.AreEqual<uint>(101024648u, (uint)((object)(voterDO.PrimaryKey)));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void Constructor194()
{
    VoterDO voterDO;
    voterDO = this.Constructor(default(uint?), new uint?(101024648u), (string)null, 
                               (string)null, (string)null, new bool?(true), new bool?(true));
    Assert.IsNotNull((object)voterDO);
    Assert.IsNotNull((object)(voterDO.PrimaryKey));
    Assert.AreEqual<uint>(101024648u, (uint)((object)(voterDO.PrimaryKey)));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathCondition><![CDATA[return cpr.hasValue != false && 101000000u < cpr.value && cpr.value < 3113000000u;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:46Z" category="coverage" message="coverage increased from 42 to 54 blocks (+12) after flipping DBComm.DBComm.DO.VoterDO..ctor at 0x001a"/>
<test name="Constructor" state="success" duration="0,00"/>
<generatedTest id="de2812b7-09c8-4e45-b52e-5687b37bd960" index="5" run="5" exceptionState="expected" status="expectedexception" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="ConstructorThrowsContractException230"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="1" dtot="0" acov="55" atot="56"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="pollingStationId">null</value>
<value name="cpr">3180150660</value>
<value name="name">null</value>
<value name="address">null</value>
<value name="city">null</value>
<value name="cardPrinted">true</value>
<value name="voted">true</value>
<code><![CDATA[try
{
  VoterDO voterDO;
  voterDO =
    this.Constructor(default(uint?), new uint?(3180150660u), (string)null, 
                     (string)null, (string)null, new bool?(true), new bool?(true));
  throw 
    new AssertFailedException("expected an exception of type ContractException");
}
catch(Exception ex)
{
  if (!PexContract.IsContractException(ex))
    throw ex;
}
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;System;Microsoft.Pex.Framework.Generated;Microsoft.Pex.Engine.Exceptions"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException230()
{
    try
    {
      VoterDO voterDO;
      voterDO =
        this.Constructor(default(uint?), new uint?(3180150660u), (string)null, 
                         (string)null, (string)null, new bool?(true), new bool?(true));
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<exceptionChain><exception typeDisplayName="ContractException" source="DBComm"><message><![CDATA[Precondition failed: cpr == null || (cpr >= 101000001 && cpr <= 3112999999)]]></message>
<type spec="Class"><definition assemblyName="DBComm" name="ContractException" token="2000021"><declaringType assemblyName="DBComm" name="__ContractsRuntime" token="2000014" namespace="System.Diagnostics.Contracts"/>
</definition>
</type>
<stackTrace><frame value="  at VoterDO..ctor(Nullable`1&lt;UInt32&gt;, Nullable`1&lt;UInt32&gt;, String, String, String, Nullable`1&lt;Boolean&gt;, Nullable`1&lt;Boolean&gt;) in C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs(48)" method="VoterDO..ctor(Nullable`1&lt;UInt32&gt;, Nullable`1&lt;UInt32&gt;, String, String, String, Nullable`1&lt;Boolean&gt;, Nullable`1&lt;Boolean&gt;)" offset="99" file="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" line="48"><method assemblyName="DBComm" name=".ctor" token="600003e"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="pollingStationId" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="cpr" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="name" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="address" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="city" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="cardPrinted" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="voted" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </param>
        public VoterDO(uint? pollingStationId, uint? cpr, string name, string address, string city, bool? cardPrinted, bool? voted)
        {]]></beforeSource>
<source><![CDATA[            Contract.Requires(cpr == null || (cpr >= 101000001 && cpr <= 3112999999));]]></source>
<afterSource><![CDATA[
            this.PollingStationId = pollingStationId;
            this.primaryKey = cpr;]]></afterSource>
</frame>
<frame value="  at VoterDOTest.Constructor(Nullable`1&lt;UInt32&gt;, Nullable`1&lt;UInt32&gt;, String, String, String, Nullable`1&lt;Boolean&gt;, Nullable`1&lt;Boolean&gt;)" method="VoterDOTest.Constructor(Nullable`1&lt;UInt32&gt;, Nullable`1&lt;UInt32&gt;, String, String, String, Nullable`1&lt;Boolean&gt;, Nullable`1&lt;Boolean&gt;)" offset="27"><method assemblyName="DBComm.Tests" name="Constructor" token="6000001"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="pollingStationId" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="cpr" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="name" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="address" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="city" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="cardPrinted" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="voted" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</method>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return cpr.hasValue != false && 3112999999u < cpr.value;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:46Z" category="coverage" message="coverage increased from 54 to 55 blocks (+1) after flipping DBComm.DBComm.DO.VoterDO..ctor at 0x003f"/>
<coverage domain="usercodeundertest" unit="block" covered="55" total="56" coveredRatio="0.9821428571428571"/>
<sourceCoverage xml="cov\e292\cov.xml" html="cov\e292\cov.html"/>
<result name="Constructor(Nullable`1&lt;UInt32&gt;, Nullable`1&lt;UInt32&gt;, String, String, String, Nullable`1&lt;Boolean&gt;, Nullable`1&lt;Boolean&gt;)" state="success" duration="2.27740776173962"/>
<duration start="2011-12-13 13:49:44Z" end="2011-12-13 13:49:46Z" seconds="2.3556041"/>
</exploration>
<exploration shortName="Constructor01()" fullName="DBComm.DBComm.DO.VoterDOTest.Constructor01()" isDynamicCode="true"><method><definition assemblyName="DBComm.Tests" name="Constructor01" token="6000002"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</definition>
</method>
<target><methodDefinition assemblyName="DBComm" name=".ctor" token="600003f"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</methodDefinition>
</target>
<memberUnderTest assemblyName="DBComm" name=".ctor" token="600003f"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</memberUnderTest>
<test name="Constructor01" state="success" duration="0,01"/>
<generatedTest id="d80f8b58-d898-48c0-b234-5044577e6583" index="1" run="1" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="Constructor01389"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="14" dtot="23" acov="14" atot="23"/>
<rcov name="asserts" dcov="1" dtot="1" acov="1" atot="1"/>
<value name="result">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=null,Voted=null,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[VoterDO voterDO;
voterDO = this.Constructor01();
Assert.IsNotNull((object)voterDO);
Assert.IsNull((object)(voterDO.PrimaryKey));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNull((object)(voterDO.CardPrinted));
Assert.IsNull((object)(voterDO.Voted));
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void Constructor01389()
{
    VoterDO voterDO;
    voterDO = this.Constructor01();
    Assert.IsNotNull((object)voterDO);
    Assert.IsNull((object)(voterDO.PrimaryKey));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNull((object)(voterDO.CardPrinted));
    Assert.IsNull((object)(voterDO.Voted));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
</generatedTest>
<log level="message" time="2011-12-13 13:49:46Z" category="coverage" message="coverage increased from 0 to 14 blocks (+14) after flipping &lt;unknown method&gt; at 0x&lt;unknown offset&gt;"/>
<coverage domain="usercodeundertest" unit="block" covered="14" total="23" coveredRatio="0.60869565217391308"/>
<sourceCoverage xml="cov\e325\cov.xml" html="cov\e325\cov.html"/>
<result name="Constructor01()" state="success" duration="0,03"/>
<duration start="2011-12-13 13:49:46Z" end="2011-12-13 13:49:46Z" seconds="0,05"/>
</exploration>
<exploration shortName="CprStringGet(VoterDO)" fullName="DBComm.DBComm.DO.VoterDOTest.CprStringGet(VoterDO)" isDynamicCode="true"><method><definition assemblyName="DBComm.Tests" name="CprStringGet" token="6000008"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</definition>
</method>
<target><propertyDefinition assemblyName="DBComm" name="CprString" token="17000009"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<propertyType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</propertyType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</propertyDefinition>
</target>
<memberUnderTest assemblyName="DBComm" name="CprString" token="17000009"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<propertyType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</propertyType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</memberUnderTest>
<explorable title="guessed how to create DBComm.DBComm.DO.VoterDO" kind="guessedclass" isExplorableTypeExported="true"><explorableType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</explorableType>
<testAssemblyName name="DBComm.Tests"/>
<update kind="CollectionCodeUpdate" name="Accept/Edit Factory"><codeUpdate kind="AddTypeCodeUpdate" name="Add type" fileNameHint="Factories\VoterDOFactory" abstract="true" sealed="true" visibility="Public"><doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="mscorlib"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<baseType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</baseType>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
<codeUpdate kind="AddMethodCodeUpdate" name="Add method" visibility="Public"><attribute><ctor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e46"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
<parameter name="factoredType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</ctor>
<ctorArgument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</ctorArgument>
</attribute>
<doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="mscorlib"/>
<reference name="System.Data.Linq"/>
<reference name="Microsoft.Pex.Framework"/>
<methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
<target><typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</target>
</codeUpdate>
<codeUpdate kind="SelectCodeUpdate" name="Select" selectKind="Body"><target><methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
</target>
</codeUpdate>
</update>
</explorable>
<test name="CprStringGet" state="success" duration="0,05"/>
<test name="CprStringGet" state="success" duration="0,08"/>
<generatedTest id="341dee00-d2bb-4d4b-98a6-20b3030f1048" index="1" run="2" exceptionState="expected" status="expectedexception" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="CprStringGetThrowsContractException613"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="5" dtot="32" acov="5" atot="32"/>
<rcov name="asserts" dcov="1" dtot="2" acov="1" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[try
{
  VoterDO voterDO;
  string s;
  voterDO = PexInvariant.CreateInstance<VoterDO>();
  PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
  PexInvariant.SetField<EntityRef<PollingStationDO>>
      ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
  PexInvariant.SetField<uint?>
      ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
  PexInvariant.SetField<string>
      ((object)voterDO, "<Name>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO, "<Address>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO, "<City>k__BackingField", (string)null);
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
  PexInvariant.CheckInvariant((object)voterDO);
  s = this.CprStringGet(voterDO);
  throw 
    new AssertFailedException("expected an exception of type ContractException");
}
catch(Exception ex)
{
  if (!PexContract.IsContractException(ex))
    throw ex;
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;System;Microsoft.Pex.Framework.Generated;Microsoft.Pex.Engine.Exceptions"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void CprStringGetThrowsContractException613()
{
    try
    {
      VoterDO voterDO;
      string s;
      voterDO = PexInvariant.CreateInstance<VoterDO>();
      PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
      PexInvariant.SetField<EntityRef<PollingStationDO>>
          ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
      PexInvariant.SetField<uint?>
          ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
      PexInvariant.SetField<string>
          ((object)voterDO, "<Name>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO, "<Address>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO, "<City>k__BackingField", (string)null);
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
      PexInvariant.CheckInvariant((object)voterDO);
      s = this.CprStringGet(voterDO);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<exceptionChain><exception typeDisplayName="ContractException" source="DBComm"><message><![CDATA[Precondition failed: PrimaryKey != null]]></message>
<type spec="Class"><definition assemblyName="DBComm" name="ContractException" token="2000021"><declaringType assemblyName="DBComm" name="__ContractsRuntime" token="2000014" namespace="System.Diagnostics.Contracts"/>
</definition>
</type>
<stackTrace><frame value="  at VoterDO.get_CprString() in C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs(94)" method="VoterDO.get_CprString()" offset="44" file="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" line="94"><method assemblyName="DBComm" name="get_CprString" token="6000042"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[        {
            get
            {]]></beforeSource>
<source><![CDATA[                Contract.Requires(PrimaryKey != null);]]></source>
<afterSource><![CDATA[                Contract.Ensures(Contract.Result<string>().Length == 10);

                string result = this.PrimaryKey.ToString();]]></afterSource>
</frame>
<frame value="  at VoterDOTest.CprStringGet(VoterDO)" method="VoterDOTest.CprStringGet(VoterDO)" offset="1"><method assemblyName="DBComm.Tests" name="CprStringGet" token="6000008"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</resultType>
</method>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[VoterDO s1 = new;
uint? s0 = target == s1 ? primaryKey_nullu : target.primaryKey;
return primaryKey_nullu.value < 101000001u && target != (VoterDO)null && primaryKey_nullu.hasValue == false && s0.hasValue == false;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:46Z" category="coverage" message="coverage increased from 0 to 5 blocks (+5) after flipping DBComm.DBComm.DO.VoterDO.$InvariantMethod$ at 0x0026"/>
<test name="CprStringGet" state="success" duration="0,00"/>
<test name="CprStringGet" state="success" duration="0,01"/>
<coverage domain="usercodeundertest" unit="block" covered="5" total="32" coveredRatio="0.15625"/>
<sourceCoverage xml="cov\e327\cov.xml" html="cov\e327\cov.html"/>
<result name="CprStringGet(VoterDO)" state="success" duration="0,46"/>
<duration start="2011-12-13 13:49:46Z" end="2011-12-13 13:49:46Z" seconds="0,47"/>
</exploration>
<exploration shortName="Equals01(VoterDO, Object)" fullName="DBComm.DBComm.DO.VoterDOTest.Equals01(VoterDO, Object)" isDynamicCode="true"><method><definition assemblyName="DBComm.Tests" name="Equals01" token="6000003"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="obj" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</resultType>
</definition>
</method>
<target><methodDefinition assemblyName="DBComm" name="Equals" token="6000054"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="obj" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</resultType>
</methodDefinition>
</target>
<memberUnderTest assemblyName="DBComm" name="Equals" token="6000054"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="obj" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</resultType>
</memberUnderTest>
<explorable title="guessed how to create DBComm.DBComm.DO.VoterDO" kind="guessedclass" isExplorableTypeExported="true"><explorableType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</explorableType>
<testAssemblyName name="DBComm.Tests"/>
<update kind="CollectionCodeUpdate" name="Accept/Edit Factory"><codeUpdate kind="AddTypeCodeUpdate" name="Add type" fileNameHint="Factories\VoterDOFactory" abstract="true" sealed="true" visibility="Public"><doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="mscorlib"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<baseType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</baseType>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
<codeUpdate kind="AddMethodCodeUpdate" name="Add method" visibility="Public"><attribute><ctor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e46"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
<parameter name="factoredType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</ctor>
<ctorArgument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</ctorArgument>
</attribute>
<doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="mscorlib"/>
<reference name="System.Data.Linq"/>
<reference name="Microsoft.Pex.Framework"/>
<methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
<target><typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</target>
</codeUpdate>
<codeUpdate kind="SelectCodeUpdate" name="Select" selectKind="Body"><target><methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
</target>
</codeUpdate>
</update>
</explorable>
<test name="Equals01" state="success" duration="0,01"/>
<test name="Equals01" state="success" duration="0,03"/>
<generatedTest id="158c91d1-af7c-4362-a486-cb210f9e0bdf" index="1" run="2" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="Equals01356"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="3" dtot="76" acov="3" atot="76"/>
<rcov name="asserts" dcov="1" dtot="1" acov="1" atot="1"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="obj">null</value>
<value name="result(target)">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result">false</value>
<code><![CDATA[VoterDO voterDO;
bool b;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
b = this.Equals01(voterDO, (object)null);
Assert.AreEqual<bool>(false, b);
Assert.IsNotNull((object)voterDO);
Assert.IsNull((object)(voterDO.PrimaryKey));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void Equals01356()
{
    VoterDO voterDO;
    bool b;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    b = this.Equals01(voterDO, (object)null);
    Assert.AreEqual<bool>(false, b);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNull((object)(voterDO.PrimaryKey));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathCondition><![CDATA[return primaryKey_nullu.value < 101000001u && target != (VoterDO)null && primaryKey_nullu.hasValue == false && methodof(target.Equals) == methodof(VoterDO.Equals) && obj == (object)null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:47Z" category="coverage" message="coverage increased from 0 to 3 blocks (+3) after flipping DBComm.DBComm.DO.VoterDO.$InvariantMethod$ at 0x0026"/>
<test name="Equals01" state="success" duration="0,02"/>
<generatedTest id="5d6317f7-371d-41ad-a046-64966c5357cd" index="2" run="3" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="Equals01352"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="4" dtot="0" acov="7" atot="76"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="obj">object</value>
<value name="result(target)">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result">false</value>
<code><![CDATA[VoterDO voterDO;
bool b;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
object s0 = new object();
b = this.Equals01(voterDO, s0);
Assert.AreEqual<bool>(false, b);
Assert.IsNotNull((object)voterDO);
Assert.IsNull((object)(voterDO.PrimaryKey));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void Equals01352()
{
    VoterDO voterDO;
    bool b;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    object s0 = new object();
    b = this.Equals01(voterDO, s0);
    Assert.AreEqual<bool>(false, b);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNull((object)(voterDO.PrimaryKey));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathCondition><![CDATA[return primaryKey_nullu.value < 101000001u && 
       target != (VoterDO)null && obj != (object)null && primaryKey_nullu.hasValue == false && methodof(target.Equals) == methodof(VoterDO.Equals) && ((object)target).GetType() != obj.GetType();
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:47Z" category="coverage" message="coverage increased from 3 to 7 blocks (+4) after flipping DBComm.DBComm.DO.VoterDO.Equals at 0x0002"/>
<test name="Equals01" state="success" duration="0,00"/>
<test name="Equals01" state="success" duration="0,00"/>
<test name="Equals01" state="success" duration="0,00"/>
<coverage domain="usercodeundertest" unit="block" covered="7" total="76" coveredRatio="0.092105263157894732"/>
<sourceCoverage xml="cov\e342\cov.xml" html="cov\e342\cov.html"/>
<result name="Equals01(VoterDO, Object)" state="success" duration="0,20"/>
<duration start="2011-12-13 13:49:46Z" end="2011-12-13 13:49:47Z" seconds="0,20"/>
</exploration>
<exploration shortName="FullyInitialized(VoterDO)" fullName="DBComm.DBComm.DO.VoterDOTest.FullyInitialized(VoterDO)" isDynamicCode="true"><method><definition assemblyName="DBComm.Tests" name="FullyInitialized" token="6000004"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</resultType>
</definition>
</method>
<target><methodDefinition assemblyName="DBComm" name="FullyInitialized" token="6000052"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</resultType>
</methodDefinition>
</target>
<memberUnderTest assemblyName="DBComm" name="FullyInitialized" token="6000052"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</resultType>
</memberUnderTest>
<explorable title="guessed how to create DBComm.DBComm.DO.VoterDO" kind="guessedclass" isExplorableTypeExported="true"><explorableType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</explorableType>
<testAssemblyName name="DBComm.Tests"/>
<update kind="CollectionCodeUpdate" name="Accept/Edit Factory"><codeUpdate kind="AddTypeCodeUpdate" name="Add type" fileNameHint="Factories\VoterDOFactory" abstract="true" sealed="true" visibility="Public"><doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="mscorlib"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<baseType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</baseType>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
<codeUpdate kind="AddMethodCodeUpdate" name="Add method" visibility="Public"><attribute><ctor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e46"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
<parameter name="factoredType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</ctor>
<ctorArgument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</ctorArgument>
</attribute>
<doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="mscorlib"/>
<reference name="System.Data.Linq"/>
<reference name="Microsoft.Pex.Framework"/>
<methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
<target><typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</target>
</codeUpdate>
<codeUpdate kind="SelectCodeUpdate" name="Select" selectKind="Body"><target><methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
</target>
</codeUpdate>
</update>
</explorable>
<test name="FullyInitialized" state="success" duration="0,01"/>
<test name="FullyInitialized" state="success" duration="0,01"/>
<generatedTest id="702d9260-d9c7-4d35-ac3f-ca08ff52a222" index="1" run="2" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="FullyInitialized83"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="6" dtot="39" acov="6" atot="39"/>
<rcov name="asserts" dcov="1" dtot="1" acov="1" atot="1"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result">false</value>
<code><![CDATA[VoterDO voterDO;
bool b;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
b = this.FullyInitialized(voterDO);
Assert.AreEqual<bool>(false, b);
Assert.IsNotNull((object)voterDO);
Assert.IsNull((object)(voterDO.PrimaryKey));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void FullyInitialized83()
{
    VoterDO voterDO;
    bool b;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    b = this.FullyInitialized(voterDO);
    Assert.AreEqual<bool>(false, b);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNull((object)(voterDO.PrimaryKey));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathCondition><![CDATA[VoterDO s1 = new;
bool s0 = target == s1 ? false : target.$evaluatingInvariant$;
uint? s2 = target == s1 ? <PollingStationId>k__BackingField_nullu1 : target.PollingStationId;
return primaryKey_nullu.value < 101000001u && 
       target != (VoterDO)null && primaryKey_nullu.hasValue == false && methodof(target.FullyInitialized) == methodof(VoterDO.FullyInitialized) && s0 == false && s2.hasValue == false;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:47Z" category="coverage" message="coverage increased from 0 to 6 blocks (+6) after flipping DBComm.DBComm.DO.VoterDO.$InvariantMethod$ at 0x0026"/>
<test name="FullyInitialized" state="success" duration="0,00"/>
<generatedTest id="e9ee465e-e02e-4118-b35e-cbe8c475282e" index="2" run="3" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="FullyInitialized611"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="4" dtot="0" acov="10" atot="39"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=1,Name=null,Address=null,City=null,CardPrinted=true (0x02),Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=null,PollingStationId=1,Name=null,Address=null,City=null,CardPrinted=true (0x02),Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result">false</value>
<code><![CDATA[VoterDO voterDO;
bool b;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", new uint?(1u));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>((object)voterDO, "<CardPrinted>k__BackingField", 
                                              new bool?(PexSafeHelpers.ByteToBoolean((byte)2)));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
b = this.FullyInitialized(voterDO);
Assert.AreEqual<bool>(false, b);
Assert.IsNotNull((object)voterDO);
Assert.IsNull((object)(voterDO.PrimaryKey));
Assert.IsNotNull((object)(voterDO.PollingStationId));
Assert.AreEqual<uint>(1u, (uint)((object)(voterDO.PollingStationId)));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(PexSafeHelpers.ByteToBoolean((byte)2), 
                      (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.Pex.Framework.Generated;Microsoft.VisualStudio.TestTools.UnitTesting"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void FullyInitialized611()
{
    VoterDO voterDO;
    bool b;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", new uint?(1u));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>((object)voterDO, "<CardPrinted>k__BackingField", 
                                                  new bool?(PexSafeHelpers.ByteToBoolean((byte)2)));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    b = this.FullyInitialized(voterDO);
    Assert.AreEqual<bool>(false, b);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNull((object)(voterDO.PrimaryKey));
    Assert.IsNotNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<uint>(1u, (uint)((object)(voterDO.PollingStationId)));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(PexSafeHelpers.ByteToBoolean((byte)2), 
                          (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathCondition><![CDATA[VoterDO s1 = new;
uint? s0 = target == s1 ? <PollingStationId>k__BackingField_nullu1 : target.PollingStationId;
bool s2 = target == s1 ? false : target.$evaluatingInvariant$;
uint? s3 = target == s1 ? primaryKey_nullu : target.primaryKey;
return primaryKey_nullu.value < 101000001u && target != (VoterDO)null && 
                                              s0.hasValue != false && primaryKey_nullu.hasValue == false && methodof(target.FullyInitialized) == methodof(VoterDO.FullyInitialized) && s2 == false && s3.hasValue == false;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:47Z" category="coverage" message="coverage increased from 6 to 10 blocks (+4) after flipping DBComm.DBComm.DO.VoterDO.FullyInitialized at 0x000f"/>
<test name="FullyInitialized" state="success" duration="0,00"/>
<test name="FullyInitialized" state="success" duration="0,00"/>
<coverage domain="usercodeundertest" unit="block" covered="10" total="39" coveredRatio="0.25641025641025639"/>
<sourceCoverage xml="cov\e349\cov.xml" html="cov\e349\cov.html"/>
<result name="FullyInitialized(VoterDO)" state="success" duration="0,19"/>
<duration start="2011-12-13 13:49:47Z" end="2011-12-13 13:49:47Z" seconds="0,19"/>
</exploration>
<exploration shortName="GetHashCode01(VoterDO)" fullName="DBComm.DBComm.DO.VoterDOTest.GetHashCode01(VoterDO)" isDynamicCode="true"><method><definition assemblyName="DBComm.Tests" name="GetHashCode01" token="6000005"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</resultType>
</definition>
</method>
<target><methodDefinition assemblyName="DBComm" name="GetHashCode" token="6000055"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</resultType>
</methodDefinition>
</target>
<memberUnderTest assemblyName="DBComm" name="GetHashCode" token="6000055"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</resultType>
</memberUnderTest>
<explorable title="guessed how to create DBComm.DBComm.DO.VoterDO" kind="guessedclass" isExplorableTypeExported="true"><explorableType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</explorableType>
<testAssemblyName name="DBComm.Tests"/>
<update kind="CollectionCodeUpdate" name="Accept/Edit Factory"><codeUpdate kind="AddTypeCodeUpdate" name="Add type" fileNameHint="Factories\VoterDOFactory" abstract="true" sealed="true" visibility="Public"><doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="mscorlib"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<baseType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</baseType>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
<codeUpdate kind="AddMethodCodeUpdate" name="Add method" visibility="Public"><attribute><ctor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e46"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
<parameter name="factoredType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</ctor>
<ctorArgument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</ctorArgument>
</attribute>
<doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="mscorlib"/>
<reference name="System.Data.Linq"/>
<reference name="Microsoft.Pex.Framework"/>
<methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
<target><typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</target>
</codeUpdate>
<codeUpdate kind="SelectCodeUpdate" name="Select" selectKind="Body"><target><methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
</target>
</codeUpdate>
</update>
</explorable>
<test name="GetHashCode01" state="success" duration="0,01"/>
<test name="GetHashCode01" state="success" duration="0,01"/>
<generatedTest id="6dfe74c1-bed4-486c-89db-5672ed0aeaac" index="1" run="2" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="GetHashCode0145"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="5" dtot="28" acov="5" atot="28"/>
<rcov name="asserts" dcov="1" dtot="1" acov="1" atot="1"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result">0</value>
<code><![CDATA[VoterDO voterDO;
int i;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
i = this.GetHashCode01(voterDO);
Assert.AreEqual<int>(0, i);
Assert.IsNotNull((object)voterDO);
Assert.IsNull((object)(voterDO.PrimaryKey));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void GetHashCode0145()
{
    VoterDO voterDO;
    int i;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    i = this.GetHashCode01(voterDO);
    Assert.AreEqual<int>(0, i);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNull((object)(voterDO.PrimaryKey));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathCondition><![CDATA[VoterDO s1 = new;
bool s0 = target == s1 ? false : target.$evaluatingInvariant$;
string s2 = target == s1 ? <Name>k__BackingField_s : target.Name;
return primaryKey_nullu.value < 101000001u && 
       target != (VoterDO)null && primaryKey_nullu.hasValue == false && methodof(target.GetHashCode) == methodof(VoterDO.GetHashCode) && s0 == false && s2 == (string)null;
]]></pathCondition>
</generatedTest>
<test name="GetHashCode01" state="success" duration="0,01"/>
<generatedTest id="b66f3710-c01f-4290-8506-9d18e70656a0" index="2" run="3" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="GetHashCode01277"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="3" dtot="0" acov="8" atot="28"/>
<rcov name="asserts" dcov="0" dtot="0" acov="1" atot="1"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=&quot;&quot;,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=&quot;&quot;,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result">757602046</value>
<code><![CDATA[VoterDO voterDO;
int i;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>((object)voterDO, "<Name>k__BackingField", "");
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
i = this.GetHashCode01(voterDO);
Assert.AreEqual<int>(757602046, i);
Assert.IsNotNull((object)voterDO);
Assert.IsNull((object)(voterDO.PrimaryKey));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>("", voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void GetHashCode01277()
{
    VoterDO voterDO;
    int i;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>((object)voterDO, "<Name>k__BackingField", "");
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    i = this.GetHashCode01(voterDO);
    Assert.AreEqual<int>(757602046, i);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNull((object)(voterDO.PrimaryKey));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>("", voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathCondition><![CDATA[VoterDO s1 = new;
string s0 = target == s1 ? <Name>k__BackingField_s : target.Name;
bool s2 = target == s1 ? false : target.$evaluatingInvariant$;
return primaryKey_nullu.value < 101000001u && 
       target != (VoterDO)null && s0 != (string)null && primaryKey_nullu.hasValue == false && methodof(target.GetHashCode) == methodof(VoterDO.GetHashCode) && s2 == false;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:47Z" category="coverage" message="coverage increased from 5 to 8 blocks (+3) after flipping DBComm.DBComm.DO.VoterDO.GetHashCode at 0x000e"/>
<test name="GetHashCode01" state="success" duration="0,00"/>
<test name="GetHashCode01" state="success" duration="0,00"/>
<coverage domain="usercodeundertest" unit="block" covered="8" total="28" coveredRatio="0.2857142857142857"/>
<sourceCoverage xml="cov\e352\cov.xml" html="cov\e352\cov.html"/>
<result name="GetHashCode01(VoterDO)" state="success" duration="0,14"/>
<duration start="2011-12-13 13:49:47Z" end="2011-12-13 13:49:47Z" seconds="0,14"/>
</exploration>
<exploration shortName="PollingStationGet(VoterDO)" fullName="DBComm.DBComm.DO.VoterDOTest.PollingStationGet(VoterDO)" isDynamicCode="true"><method><definition assemblyName="DBComm.Tests" name="PollingStationGet" token="6000009"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</resultType>
</definition>
</method>
<target><propertyDefinition assemblyName="DBComm" name="PollingStation" token="17000010"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<propertyType spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</propertyType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</propertyDefinition>
</target>
<memberUnderTest assemblyName="DBComm" name="PollingStation" token="17000010"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<propertyType spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</propertyType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</memberUnderTest>
<explorable title="guessed how to create DBComm.DBComm.DO.VoterDO" kind="guessedclass" isExplorableTypeExported="true"><explorableType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</explorableType>
<testAssemblyName name="DBComm.Tests"/>
<update kind="CollectionCodeUpdate" name="Accept/Edit Factory"><codeUpdate kind="AddTypeCodeUpdate" name="Add type" fileNameHint="Factories\VoterDOFactory" abstract="true" sealed="true" visibility="Public"><doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="mscorlib"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<baseType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</baseType>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
<codeUpdate kind="AddMethodCodeUpdate" name="Add method" visibility="Public"><attribute><ctor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e46"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
<parameter name="factoredType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</ctor>
<ctorArgument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</ctorArgument>
</attribute>
<doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="mscorlib"/>
<reference name="System.Data.Linq"/>
<reference name="Microsoft.Pex.Framework"/>
<methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
<target><typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</target>
</codeUpdate>
<codeUpdate kind="SelectCodeUpdate" name="Select" selectKind="Body"><target><methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
</target>
</codeUpdate>
</update>
</explorable>
<test name="PollingStationGet" state="success" duration="0,01"/>
<test name="PollingStationGet" state="success" duration="0,73"/>
<generatedTest id="49cfed41-0c51-4b46-9e33-ab6ef40d8d9f" index="1" run="2" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="PollingStationGet418"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="22" acov="2" atot="22"/>
<rcov name="asserts" dcov="1" dtot="1" acov="1" atot="1"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result">null</value>
<code><![CDATA[VoterDO voterDO;
PollingStationDO pollingStationDO;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
pollingStationDO = this.PollingStationGet(voterDO);
Assert.IsNull((object)pollingStationDO);
Assert.IsNotNull((object)voterDO);
Assert.IsNull((object)(voterDO.PrimaryKey));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void PollingStationGet418()
{
    VoterDO voterDO;
    PollingStationDO pollingStationDO;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    pollingStationDO = this.PollingStationGet(voterDO);
    Assert.IsNull((object)pollingStationDO);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNull((object)(voterDO.PrimaryKey));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathCondition><![CDATA[VoterDO s1 = new;
EntityRef<PollingStationDO> s0 = target == s1 ? _pollingStation_entityRef : target._pollingStation;
return primaryKey_nullu.value < 101000001u && target != (VoterDO)null && primaryKey_nullu.hasValue == false && s0.source == (IEnumerable<PollingStationDO>)null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:48Z" category="coverage" message="coverage increased from 0 to 2 blocks (+2) after flipping DBComm.DBComm.DO.VoterDO.$InvariantMethod$ at 0x0026"/>
<test name="PollingStationGet" state="success" duration="0,00"/>
<test name="PollingStationGet" state="success" duration="0,00"/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="22" coveredRatio="0.090909090909090912"/>
<log level="message" time="2011-12-13 13:49:48Z" category="symbols" message="could not load symbols for C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Data.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Data.Linq.dll"/>
<sourceCoverage xml="cov\e358\cov.xml" html="cov\e358\cov.html"/>
<result name="PollingStationGet(VoterDO)" state="success" duration="0,81"/>
<duration start="2011-12-13 13:49:47Z" end="2011-12-13 13:49:48Z" seconds="0,81"/>
</exploration>
<exploration shortName="PrimaryKeyGet(VoterDO)" fullName="DBComm.DBComm.DO.VoterDOTest.PrimaryKeyGet(VoterDO)" isDynamicCode="true"><method><definition assemblyName="DBComm.Tests" name="PrimaryKeyGet" token="600000a"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</resultType>
</definition>
</method>
<target><propertyDefinition assemblyName="DBComm" name="PrimaryKey" token="17000008"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</propertyType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</propertyDefinition>
</target>
<memberUnderTest assemblyName="DBComm" name="PrimaryKey" token="17000008"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</propertyType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</memberUnderTest>
<explorable title="guessed how to create DBComm.DBComm.DO.VoterDO" kind="guessedclass" isExplorableTypeExported="true"><explorableType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</explorableType>
<testAssemblyName name="DBComm.Tests"/>
<update kind="CollectionCodeUpdate" name="Accept/Edit Factory"><codeUpdate kind="AddTypeCodeUpdate" name="Add type" fileNameHint="Factories\VoterDOFactory" abstract="true" sealed="true" visibility="Public"><doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="mscorlib"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<baseType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</baseType>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
<codeUpdate kind="AddMethodCodeUpdate" name="Add method" visibility="Public"><attribute><ctor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e46"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
<parameter name="factoredType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</ctor>
<ctorArgument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</ctorArgument>
</attribute>
<doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="mscorlib"/>
<reference name="System.Data.Linq"/>
<reference name="Microsoft.Pex.Framework"/>
<methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
<target><typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</target>
</codeUpdate>
<codeUpdate kind="SelectCodeUpdate" name="Select" selectKind="Body"><target><methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
</target>
</codeUpdate>
</update>
</explorable>
<test name="PrimaryKeyGet" state="success" duration="0,00"/>
<test name="PrimaryKeyGet" state="success" duration="0,01"/>
<generatedTest id="19366275-26f0-45f0-9354-69f9a2dd1165" index="1" run="2" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="PrimaryKeyGet418"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="1" dtot="20" acov="1" atot="20"/>
<rcov name="asserts" dcov="1" dtot="1" acov="1" atot="1"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result">null</value>
<code><![CDATA[VoterDO voterDO;
uint? nullu;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
nullu = this.PrimaryKeyGet(voterDO);
Assert.IsNull((object)nullu);
Assert.IsNotNull((object)voterDO);
Assert.IsNull((object)(voterDO.PrimaryKey));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void PrimaryKeyGet418()
{
    VoterDO voterDO;
    uint? nullu;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    nullu = this.PrimaryKeyGet(voterDO);
    Assert.IsNull((object)nullu);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNull((object)(voterDO.PrimaryKey));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathCondition><![CDATA[return primaryKey_nullu.value < 101000001u && target != (VoterDO)null && primaryKey_nullu.hasValue == false && methodof(target.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey);
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:48Z" category="coverage" message="coverage increased from 0 to 1 blocks (+1) after flipping DBComm.DBComm.DO.VoterDO.$InvariantMethod$ at 0x0026"/>
<test name="PrimaryKeyGet" state="success" duration="0,00"/>
<test name="PrimaryKeyGet" state="success" duration="0,00"/>
<coverage domain="usercodeundertest" unit="block" covered="1" total="20" coveredRatio="0.05"/>
<sourceCoverage xml="cov\e363\cov.xml" html="cov\e363\cov.html"/>
<result name="PrimaryKeyGet(VoterDO)" state="success" duration="0,12"/>
<duration start="2011-12-13 13:49:48Z" end="2011-12-13 13:49:48Z" seconds="0,14"/>
</exploration>
<exploration shortName="ResetAssociations(VoterDO)" fullName="DBComm.DBComm.DO.VoterDOTest.ResetAssociations(VoterDO)" isDynamicCode="true"><method><definition assemblyName="DBComm.Tests" name="ResetAssociations" token="6000006"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</definition>
</method>
<target><methodDefinition assemblyName="DBComm" name="ResetAssociations" token="6000051"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</methodDefinition>
</target>
<memberUnderTest assemblyName="DBComm" name="ResetAssociations" token="6000051"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</memberUnderTest>
<explorable title="guessed how to create DBComm.DBComm.DO.VoterDO" kind="guessedclass" isExplorableTypeExported="true"><explorableType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</explorableType>
<testAssemblyName name="DBComm.Tests"/>
<update kind="CollectionCodeUpdate" name="Accept/Edit Factory"><codeUpdate kind="AddTypeCodeUpdate" name="Add type" fileNameHint="Factories\VoterDOFactory" abstract="true" sealed="true" visibility="Public"><doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="mscorlib"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<baseType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</baseType>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
<codeUpdate kind="AddMethodCodeUpdate" name="Add method" visibility="Public"><attribute><ctor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e46"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
<parameter name="factoredType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</ctor>
<ctorArgument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</ctorArgument>
</attribute>
<doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="mscorlib"/>
<reference name="System.Data.Linq"/>
<reference name="Microsoft.Pex.Framework"/>
<methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
<target><typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</target>
</codeUpdate>
<codeUpdate kind="SelectCodeUpdate" name="Select" selectKind="Body"><target><methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
</target>
</codeUpdate>
</update>
</explorable>
<test name="ResetAssociations" state="success" duration="0,01"/>
<test name="ResetAssociations" state="success" duration="0,01"/>
<generatedTest id="823b594d-a2e6-4618-b183-0fc9ded8551b" index="1" run="2" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="ResetAssociations112"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="13" dtot="22" acov="13" atot="22"/>
<rcov name="asserts" dcov="1" dtot="1" acov="1" atot="1"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[VoterDO voterDO;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
this.ResetAssociations(voterDO);
Assert.IsNotNull((object)voterDO);
Assert.IsNull((object)(voterDO.PrimaryKey));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void ResetAssociations112()
{
    VoterDO voterDO;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    this.ResetAssociations(voterDO);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNull((object)(voterDO.PrimaryKey));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathCondition><![CDATA[VoterDO s2 = new;
uint? s1 = target == s2 ? primaryKey_nullu : target.primaryKey;
uint? s0 = s1;
bool s3 = target == s2 ? false : target.$evaluatingInvariant$;
return primaryKey_nullu.value < 101000001u && target != (VoterDO)null && s0.value < 101000001u && primaryKey_nullu.hasValue == false && 
                                                                                                  methodof(target.ResetAssociations) == methodof(VoterDO.ResetAssociations) && methodof(target.$InvariantMethod$) == methodof(VoterDO.$InvariantMethod$) && s3 == false && s0.hasValue == false;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:48Z" category="coverage" message="coverage increased from 0 to 13 blocks (+13) after flipping DBComm.DBComm.DO.VoterDO.$InvariantMethod$ at 0x0026"/>
<test name="ResetAssociations" state="success" duration="0,00"/>
<test name="ResetAssociations" state="success" duration="0,00"/>
<coverage domain="usercodeundertest" unit="block" covered="13" total="22" coveredRatio="0.59090909090909094"/>
<sourceCoverage xml="cov\e365\cov.xml" html="cov\e365\cov.html"/>
<result name="ResetAssociations(VoterDO)" state="success" duration="0,15"/>
<duration start="2011-12-13 13:49:48Z" end="2011-12-13 13:49:48Z" seconds="0,16"/>
</exploration>
<exploration shortName="UpdateValues(VoterDO, IDataObject)" fullName="DBComm.DBComm.DO.VoterDOTest.UpdateValues(VoterDO, IDataObject)" isDynamicCode="true"><method><definition assemblyName="DBComm.Tests" name="UpdateValues" token="6000007"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="2"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</definition>
</method>
<target><methodDefinition assemblyName="DBComm" name="UpdateValues" token="6000053"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="1"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</methodDefinition>
</target>
<memberUnderTest assemblyName="DBComm" name="UpdateValues" token="6000053"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="1"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</memberUnderTest>
<log level="warning" time="2011-12-13 13:49:48Z" wikiTopic="Usable Type Guessed" category="domains" message="will use DBComm.DBComm.DO.LogDO as IDataObject"><codeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Add [PexUseType]" fileNameHint="PexAssemblyInfo"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000b67"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexUseTypeAttribute" token="200023e" namespace="Microsoft.Pex.Framework.Using"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexUseTypeAttribute" token="200023e" namespace="Microsoft.Pex.Framework.Using"/>
</type>
</parameter>
<parameter name="targetType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="LogDO" token="2000009" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</argument>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
</log>
<log level="warning" time="2011-12-13 13:49:48Z" wikiTopic="Usable Type Guessed" category="domains" message="will use DBComm.DBComm.DO.VoterDO as IDataObject"><codeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Add [PexUseType]" fileNameHint="PexAssemblyInfo"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000b67"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexUseTypeAttribute" token="200023e" namespace="Microsoft.Pex.Framework.Using"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexUseTypeAttribute" token="200023e" namespace="Microsoft.Pex.Framework.Using"/>
</type>
</parameter>
<parameter name="targetType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</argument>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
</log>
<log level="warning" time="2011-12-13 13:49:48Z" wikiTopic="Usable Type Guessed" category="domains" message="will use DBComm.DBComm.DO.PollingStationDO as IDataObject"><codeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Add [PexUseType]" fileNameHint="PexAssemblyInfo"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000b67"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexUseTypeAttribute" token="200023e" namespace="Microsoft.Pex.Framework.Using"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexUseTypeAttribute" token="200023e" namespace="Microsoft.Pex.Framework.Using"/>
</type>
</parameter>
<parameter name="targetType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</argument>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
</log>
<log level="warning" time="2011-12-13 13:49:48Z" wikiTopic="Usable Type Guessed" category="domains" message="will use DBComm.DBComm.DO.MunicipalityDO as IDataObject"><codeUpdate kind="AddOrUpdateAttributeCodeUpdate" name="Add [PexUseType]" fileNameHint="PexAssemblyInfo"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000b67"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexUseTypeAttribute" token="200023e" namespace="Microsoft.Pex.Framework.Using"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexUseTypeAttribute" token="200023e" namespace="Microsoft.Pex.Framework.Using"/>
</type>
</parameter>
<parameter name="targetType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="MunicipalityDO" token="2000012" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</argument>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
</log>
<explorable title="guessed how to create DBComm.DBComm.DO.VoterDO" kind="guessedclass" isExplorableTypeExported="true"><explorableType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</explorableType>
<testAssemblyName name="DBComm.Tests"/>
<update kind="CollectionCodeUpdate" name="Accept/Edit Factory"><codeUpdate kind="AddTypeCodeUpdate" name="Add type" fileNameHint="Factories\VoterDOFactory" abstract="true" sealed="true" visibility="Public"><doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="mscorlib"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<baseType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</baseType>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
<codeUpdate kind="AddMethodCodeUpdate" name="Add method" visibility="Public"><attribute><ctor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e46"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
<parameter name="factoredType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</ctor>
<ctorArgument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</ctorArgument>
</attribute>
<doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.VoterDO instances</summary>
]]></doc>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="mscorlib"/>
<reference name="System.Data.Linq"/>
<reference name="Microsoft.Pex.Framework"/>
<methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
<target><typeDefinition assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</target>
</codeUpdate>
<codeUpdate kind="SelectCodeUpdate" name="Select" selectKind="Body"><target><methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="VoterDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="primaryKey_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="_pollingStation_entityRef" position="1"><type spec="ValueType"><definition assemblyName="System.Data.Linq" valueType="true" name="EntityRef`1" token="200014e" namespace="System.Data.Linq"><genericParameter value="TEntity"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;PollingStationId&gt;k__BackingField_nullu1" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Name&gt;k__BackingField_s" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;Address&gt;k__BackingField_s1" position="4"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;City&gt;k__BackingField_s2" position="5"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="&lt;CardPrinted&gt;k__BackingField_nullb" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="&lt;Voted&gt;k__BackingField_nullb1" position="7"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="200009d" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
</target>
</codeUpdate>
</update>
</explorable>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,03"/>
<generatedTest id="90400b46-5cbe-4f75-959b-6c077e445083" index="1" run="2" exceptionState="expected" status="expectedexception" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="UpdateValuesThrowsContractException387"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="96" acov="2" atot="96"/>
<rcov name="asserts" dcov="1" dtot="2" acov="1" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="dummy">null</value>
<code><![CDATA[try
{
  VoterDO voterDO;
  voterDO = PexInvariant.CreateInstance<VoterDO>();
  PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
  PexInvariant.SetField<EntityRef<PollingStationDO>>
      ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
  PexInvariant.SetField<uint?>
      ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
  PexInvariant.SetField<string>
      ((object)voterDO, "<Name>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO, "<Address>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO, "<City>k__BackingField", (string)null);
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
  PexInvariant.CheckInvariant((object)voterDO);
  this.UpdateValues(voterDO, (IDataObject)null);
  throw 
    new AssertFailedException("expected an exception of type ContractException");
}
catch(Exception ex)
{
  if (!PexContract.IsContractException(ex))
    throw ex;
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;System;Microsoft.Pex.Framework.Generated;Microsoft.Pex.Engine.Exceptions"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void UpdateValuesThrowsContractException387()
{
    try
    {
      VoterDO voterDO;
      voterDO = PexInvariant.CreateInstance<VoterDO>();
      PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
      PexInvariant.SetField<EntityRef<PollingStationDO>>
          ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
      PexInvariant.SetField<uint?>
          ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
      PexInvariant.SetField<string>
          ((object)voterDO, "<Name>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO, "<Address>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO, "<City>k__BackingField", (string)null);
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
      PexInvariant.CheckInvariant((object)voterDO);
      this.UpdateValues(voterDO, (IDataObject)null);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<exceptionChain><exception typeDisplayName="ContractException" source="DBComm"><message><![CDATA[Precondition failed: dummy != null]]></message>
<type spec="Class"><definition assemblyName="DBComm" name="ContractException" token="2000021"><declaringType assemblyName="DBComm" name="__ContractsRuntime" token="2000014" namespace="System.Diagnostics.Contracts"/>
</definition>
</type>
<stackTrace><frame value="  at VoterDO.UpdateValues(IDataObject) in C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs(190)" method="VoterDO.UpdateValues(IDataObject)" offset="36" file="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" line="190"><method assemblyName="DBComm" name="UpdateValues" token="6000053"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="1"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </param>
        public void UpdateValues(IDataObject dummy)
        {]]></beforeSource>
<source><![CDATA[            Contract.Requires(dummy != null); // Re-stipulate this contract, since it must be checked before the added contracts.]]></source>
<afterSource><![CDATA[            Contract.Requires(dummy.GetType() == this.GetType());
            Contract.Requires(dummy.PrimaryKey == null || (((VoterDO)dummy).PrimaryKey >= 101000001 && ((VoterDO)dummy).PrimaryKey <= 3012999999));
]]></afterSource>
</frame>
<frame value="  at VoterDOTest.UpdateValues(VoterDO, IDataObject)" method="VoterDOTest.UpdateValues(VoterDO, IDataObject)" offset="2"><method assemblyName="DBComm.Tests" name="UpdateValues" token="6000007"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="2"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</method>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[return 
  primaryKey_nullu.value < 101000001u && target != (VoterDO)null && primaryKey_nullu.hasValue == false && methodof(target.UpdateValues) == methodof(VoterDO.UpdateValues) && dummy == (IDataObject)null;
]]></pathCondition>
</generatedTest>
<test name="UpdateValues" state="success" duration="0,03"/>
<generatedTest id="c435b91a-2e0a-4e7c-ab23-f3d55dee10cf" index="2" run="3" exceptionState="expected" status="expectedexception" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="UpdateValuesThrowsContractException821"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="37" dtot="18" acov="39" atot="114"/>
<rcov name="asserts" dcov="1" dtot="0" acov="2" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="dummy">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[try
{
  VoterDO voterDO;
  voterDO = PexInvariant.CreateInstance<VoterDO>();
  PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
  PexInvariant.SetField<EntityRef<PollingStationDO>>
      ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
  PexInvariant.SetField<uint?>
      ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
  PexInvariant.SetField<string>
      ((object)voterDO, "<Name>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO, "<Address>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO, "<City>k__BackingField", (string)null);
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
  PexInvariant.CheckInvariant((object)voterDO);
  this.UpdateValues(voterDO, (IDataObject)voterDO);
  throw 
    new AssertFailedException("expected an exception of type ContractException");
}
catch(Exception ex)
{
  if (!PexContract.IsContractException(ex))
    throw ex;
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;System;Microsoft.Pex.Framework.Generated;Microsoft.Pex.Engine.Exceptions"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void UpdateValuesThrowsContractException821()
{
    try
    {
      VoterDO voterDO;
      voterDO = PexInvariant.CreateInstance<VoterDO>();
      PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
      PexInvariant.SetField<EntityRef<PollingStationDO>>
          ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
      PexInvariant.SetField<uint?>
          ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
      PexInvariant.SetField<string>
          ((object)voterDO, "<Name>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO, "<Address>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO, "<City>k__BackingField", (string)null);
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
      PexInvariant.CheckInvariant((object)voterDO);
      this.UpdateValues(voterDO, (IDataObject)voterDO);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<exceptionChain><exception typeDisplayName="ContractException" source="DBComm"><message><![CDATA[Precondition failed: value >= 101000001 && value <= 3112999999]]></message>
<type spec="Class"><definition assemblyName="DBComm" name="ContractException" token="2000021"><declaringType assemblyName="DBComm" name="__ContractsRuntime" token="2000014" namespace="System.Diagnostics.Contracts"/>
</definition>
</type>
<stackTrace><frame value="  at VoterDO.set_PrimaryKey(Nullable`1&lt;UInt32&gt;) in C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs(81)" method="VoterDO.set_PrimaryKey(Nullable`1&lt;UInt32&gt;)" offset="104" file="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" line="81"><method assemblyName="DBComm" name="set_PrimaryKey" token="6000041"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="value" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            private set
            {]]></beforeSource>
<source><![CDATA[                Contract.Requires(value >= 101000001 && value <= 3112999999);]]></source>
<afterSource><![CDATA[                this.primaryKey = value;
            }
        }]]></afterSource>
</frame>
<frame value="  at VoterDO.UpdateValues(IDataObject) in C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs(198)" method="VoterDO.UpdateValues(IDataObject)" offset="403" file="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" line="198"><method assemblyName="DBComm" name="UpdateValues" token="6000053"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="1"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            Contract.Assert(voterDummy != null);

            this.PollingStationId = voterDummy.PollingStationId ?? this.PollingStationId;]]></beforeSource>
<source><![CDATA[            this.PrimaryKey = voterDummy.PrimaryKey ?? this.PrimaryKey;]]></source>
<afterSource><![CDATA[            this.Name = voterDummy.Name ?? this.Name;
            this.City = voterDummy.City ?? this.City;
            this.Address = voterDummy.Address ?? this.Address;]]></afterSource>
</frame>
<frame value="  at VoterDOTest.UpdateValues(VoterDO, IDataObject)" method="VoterDOTest.UpdateValues(VoterDO, IDataObject)" offset="2"><method assemblyName="DBComm.Tests" name="UpdateValues" token="6000007"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="2"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</method>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[IDataObject s0 = dummy == (IDataObject)null || dummy is VoterDO ? dummy : (IDataObject)null;
VoterDO s3 = new;
bool s2 = s0 == (IDataObject)s3 ? false : ((VoterDO)s0).$evaluatingInvariant$;
bool s1 = s0 == (IDataObject)target ? true : s2;
uint? s4 = target == s3 ? primaryKey_nullu : target.primaryKey;
uint? s5 = dummy == (IDataObject)s3 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
uint? s6 = s0 == (IDataObject)s3 ? <PollingStationId>k__BackingField_nullu1 : ((VoterDO)s0).PollingStationId;
uint? s7 = s0 == (IDataObject)s3 ? primaryKey_nullu : ((VoterDO)s0).primaryKey;
return primaryKey_nullu.value < 101000001u && 
       target != (VoterDO)null && dummy != (IDataObject)null && ((object)dummy).GetType() == ((object)target).GetType() && s0 != (IDataObject)null && s1 != false && s4.value < 101000001u && 
                                                                                                                                                                     primaryKey_nullu.hasValue == false && methodof(target.UpdateValues) == methodof(VoterDO.UpdateValues) && methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && 
                                                                                                                                                                                                                                                                              s5.hasValue == false && s6.hasValue == false && methodof(s0.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && s7.hasValue == false;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:48Z" category="coverage" message="coverage increased from 2 to 39 blocks (+37) after flipping System.Diagnostics.Contracts.__ContractsRuntime.Requires at 0x0001"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<explorable title="guessed how to create DBComm.DBComm.DO.PollingStationDO" kind="guessedclass" isExplorableTypeExported="true"><explorableType spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</explorableType>
<testAssemblyName name="DBComm.Tests"/>
<update kind="CollectionCodeUpdate" name="Accept/Edit Factory"><codeUpdate kind="AddTypeCodeUpdate" name="Add type" fileNameHint="Factories\PollingStationDOFactory" abstract="true" sealed="true" visibility="Public"><doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.PollingStationDO instances</summary>
]]></doc>
<reference name="mscorlib"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<typeDefinition assemblyName="DBComm.Tests" name="PollingStationDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<baseType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</baseType>
<target><assembly name="DBComm.Tests"/>
</target>
</codeUpdate>
<codeUpdate kind="AddMethodCodeUpdate" name="Add method" visibility="Public"><attribute><ctor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e46"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexFactoryMethodAttribute" token="200027d" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
<parameter name="factoredType" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Type" token="2000130" namespace="System"/>
</type>
</parameter>
</definition>
</ctor>
<ctorArgument><value kind="TypeOfExpression"><type spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</type>
</value>
</ctorArgument>
</attribute>
<doc><![CDATA[<summary>A factory for DBComm.DBComm.DO.PollingStationDO instances</summary>
]]></doc>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="mscorlib"/>
<reference name="System.Data.Linq"/>
<methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="PollingStationDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="municipalityId_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="id_nullu1" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="name_s" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="address_s1" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
<target><typeDefinition assemblyName="DBComm.Tests" name="PollingStationDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</target>
</codeUpdate>
<codeUpdate kind="SelectCodeUpdate" name="Select" selectKind="Body"><target><methodDefinition assemblyName="DBComm.Tests" name="Create" static="true"><declaringType assemblyName="DBComm.Tests" name="PollingStationDOFactory" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter name="municipalityId_nullu" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="id_nullu1" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
<parameter name="name_s" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<parameter name="address_s1" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="200004e" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="DBComm" name="PollingStationDO" token="2000011" namespace="DBComm.DBComm.DO"/>
</resultType>
</methodDefinition>
</target>
</codeUpdate>
</update>
</explorable>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<generatedTest id="14a55fd8-83d0-42f3-8e93-5cc767ea804b" index="3" run="9" exceptionState="expected" status="expectedexception" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="UpdateValuesThrowsContractException717"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="39" atot="114"/>
<rcov name="asserts" dcov="0" dtot="0" acov="2" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="dummy">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[try
{
  VoterDO voterDO;
  VoterDO voterDO1;
  voterDO = PexInvariant.CreateInstance<VoterDO>();
  PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
  PexInvariant.SetField<EntityRef<PollingStationDO>>
      ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
  PexInvariant.SetField<uint?>
      ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
  PexInvariant.SetField<string>
      ((object)voterDO, "<Name>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO, "<Address>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO, "<City>k__BackingField", (string)null);
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
  PexInvariant.CheckInvariant((object)voterDO);
  voterDO1 = PexInvariant.CreateInstance<VoterDO>();
  PexInvariant.SetField<uint?>((object)voterDO1, "primaryKey", default(uint?));
  PexInvariant.SetField<EntityRef<PollingStationDO>>
      ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
  PexInvariant.SetField<uint?>
      ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
  PexInvariant.SetField<string>
      ((object)voterDO1, "<Name>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO1, "<Address>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO1, "<City>k__BackingField", (string)null);
  PexInvariant.SetField<bool?>
      ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
  PexInvariant.SetField<bool?>
      ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
  PexInvariant.CheckInvariant((object)voterDO1);
  this.UpdateValues(voterDO, (IDataObject)voterDO1);
  throw 
    new AssertFailedException("expected an exception of type ContractException");
}
catch(Exception ex)
{
  if (!PexContract.IsContractException(ex))
    throw ex;
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;System;Microsoft.Pex.Framework.Generated;Microsoft.Pex.Engine.Exceptions"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void UpdateValuesThrowsContractException717()
{
    try
    {
      VoterDO voterDO;
      VoterDO voterDO1;
      voterDO = PexInvariant.CreateInstance<VoterDO>();
      PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
      PexInvariant.SetField<EntityRef<PollingStationDO>>
          ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
      PexInvariant.SetField<uint?>
          ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
      PexInvariant.SetField<string>
          ((object)voterDO, "<Name>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO, "<Address>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO, "<City>k__BackingField", (string)null);
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
      PexInvariant.CheckInvariant((object)voterDO);
      voterDO1 = PexInvariant.CreateInstance<VoterDO>();
      PexInvariant.SetField<uint?>((object)voterDO1, "primaryKey", default(uint?));
      PexInvariant.SetField<EntityRef<PollingStationDO>>
          ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
      PexInvariant.SetField<uint?>
          ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
      PexInvariant.SetField<string>
          ((object)voterDO1, "<Name>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO1, "<Address>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO1, "<City>k__BackingField", (string)null);
      PexInvariant.SetField<bool?>
          ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
      PexInvariant.SetField<bool?>
          ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
      PexInvariant.CheckInvariant((object)voterDO1);
      this.UpdateValues(voterDO, (IDataObject)voterDO1);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<exceptionChain><exception typeDisplayName="ContractException" source="DBComm"><message><![CDATA[Precondition failed: value >= 101000001 && value <= 3112999999]]></message>
<type spec="Class"><definition assemblyName="DBComm" name="ContractException" token="2000021"><declaringType assemblyName="DBComm" name="__ContractsRuntime" token="2000014" namespace="System.Diagnostics.Contracts"/>
</definition>
</type>
<stackTrace><frame value="  at VoterDO.set_PrimaryKey(Nullable`1&lt;UInt32&gt;) in C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs(81)" method="VoterDO.set_PrimaryKey(Nullable`1&lt;UInt32&gt;)" offset="104" file="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" line="81"><method assemblyName="DBComm" name="set_PrimaryKey" token="6000041"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="value" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            private set
            {]]></beforeSource>
<source><![CDATA[                Contract.Requires(value >= 101000001 && value <= 3112999999);]]></source>
<afterSource><![CDATA[                this.primaryKey = value;
            }
        }]]></afterSource>
</frame>
<frame value="  at VoterDO.UpdateValues(IDataObject) in C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs(198)" method="VoterDO.UpdateValues(IDataObject)" offset="403" file="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" line="198"><method assemblyName="DBComm" name="UpdateValues" token="6000053"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="1"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            Contract.Assert(voterDummy != null);

            this.PollingStationId = voterDummy.PollingStationId ?? this.PollingStationId;]]></beforeSource>
<source><![CDATA[            this.PrimaryKey = voterDummy.PrimaryKey ?? this.PrimaryKey;]]></source>
<afterSource><![CDATA[            this.Name = voterDummy.Name ?? this.Name;
            this.City = voterDummy.City ?? this.City;
            this.Address = voterDummy.Address ?? this.Address;]]></afterSource>
</frame>
<frame value="  at VoterDOTest.UpdateValues(VoterDO, IDataObject)" method="VoterDOTest.UpdateValues(VoterDO, IDataObject)" offset="2"><method assemblyName="DBComm.Tests" name="UpdateValues" token="6000007"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="2"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</method>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathAssumption><![CDATA[IDataObject s0 = dummy == (IDataObject)null || dummy is VoterDO ? dummy : (IDataObject)null;
VoterDO s1 = new;
VoterDO s4 = new;
bool s3 = s0 == (IDataObject)s4 ? false : ((VoterDO)s0).$evaluatingInvariant$;
bool s2 = s0 == (IDataObject)target ? true : s3;
uint? s5 = dummy == (IDataObject)s4 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
return (dummy == (IDataObject)s1 || s0 == (IDataObject)s1) && s2 == false && s5.hasValue == false && 
                                                                             methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && methodof(target.UpdateValues) == methodof(VoterDO.UpdateValues) && primaryKey_nullu.hasValue == false && 
                                                                                                                                                                                                                      s0 != (IDataObject)null && ((object)dummy).GetType() == ((object)target).GetType() && dummy != (IDataObject)null && target != (VoterDO)null && primaryKey_nullu.value < 101000001u;
]]></pathAssumption>
<pathCondition><![CDATA[VoterDO s1 = new;
VoterDO s2 = new;
uint? s0 = target == s1 ? primaryKey_nullu : target == s2 ? primaryKey_nullu : target.primaryKey;
uint? s3 = dummy == (IDataObject)s1 ? primaryKey_nullu : dummy == (IDataObject)s2 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
IDataObject s5 = dummy == (IDataObject)null || dummy is VoterDO ? dummy : (IDataObject)null;
bool s6 = s5 == (IDataObject)s1 ? false : s5 == (IDataObject)s2 ? false : ((VoterDO)s5).$evaluatingInvariant$;
bool s4 = s5 == (IDataObject)target ? true : s6;
uint? s7 = s5 == (IDataObject)s1 ? <PollingStationId>k__BackingField_nullu1 : s5 == (IDataObject)s2 ? <PollingStationId>k__BackingField_nullu1 : ((VoterDO)s5).PollingStationId;
uint? s8 = s5 == (IDataObject)s1 ? primaryKey_nullu : s5 == (IDataObject)s2 ? primaryKey_nullu : ((VoterDO)s5).primaryKey;
return primaryKey_nullu.value < 101000001u && s0.value < 101000001u && 
                                              primaryKey_nullu.hasValue == false && s3.hasValue == false && s4 == false && s7.hasValue == false && methodof(s5.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && s8.hasValue == false;
]]></pathCondition>
</generatedTest>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,02"/>
<generatedTest id="baad3b73-462d-4ceb-91ba-fd2c9278bdeb" index="4" run="11" exceptionState="expected" status="expectedexception" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="UpdateValuesThrowsContractException327"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="39" atot="114"/>
<rcov name="asserts" dcov="0" dtot="0" acov="2" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="dummy">...</value>
<code><![CDATA[try
{
  VoterDO voterDO;
  PollingStationDO pollingStationDO;
  voterDO = PexInvariant.CreateInstance<VoterDO>();
  PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
  PexInvariant.SetField<EntityRef<PollingStationDO>>
      ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
  PexInvariant.SetField<uint?>
      ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
  PexInvariant.SetField<string>
      ((object)voterDO, "<Name>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO, "<Address>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO, "<City>k__BackingField", (string)null);
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
  PexInvariant.CheckInvariant((object)voterDO);
  pollingStationDO = new PollingStationDO
                         (default(uint?), default(uint?), (string)null, (string)null);
  this.UpdateValues(voterDO, (IDataObject)pollingStationDO);
  throw 
    new AssertFailedException("expected an exception of type ContractException");
}
catch(Exception ex)
{
  if (!PexContract.IsContractException(ex))
    throw ex;
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;System;Microsoft.Pex.Framework.Generated;Microsoft.Pex.Engine.Exceptions"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void UpdateValuesThrowsContractException327()
{
    try
    {
      VoterDO voterDO;
      PollingStationDO pollingStationDO;
      voterDO = PexInvariant.CreateInstance<VoterDO>();
      PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
      PexInvariant.SetField<EntityRef<PollingStationDO>>
          ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
      PexInvariant.SetField<uint?>
          ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
      PexInvariant.SetField<string>
          ((object)voterDO, "<Name>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO, "<Address>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO, "<City>k__BackingField", (string)null);
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
      PexInvariant.CheckInvariant((object)voterDO);
      pollingStationDO = new PollingStationDO
                             (default(uint?), default(uint?), (string)null, (string)null);
      this.UpdateValues(voterDO, (IDataObject)pollingStationDO);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<exceptionChain><exception typeDisplayName="ContractException" source="DBComm"><message><![CDATA[Precondition failed: dummy.GetType() == this.GetType()]]></message>
<type spec="Class"><definition assemblyName="DBComm" name="ContractException" token="2000021"><declaringType assemblyName="DBComm" name="__ContractsRuntime" token="2000014" namespace="System.Diagnostics.Contracts"/>
</definition>
</type>
<stackTrace><frame value="  at VoterDO.UpdateValues(IDataObject) in C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs(191)" method="VoterDO.UpdateValues(IDataObject)" offset="65" file="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" line="191"><method assemblyName="DBComm" name="UpdateValues" token="6000053"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="1"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void UpdateValues(IDataObject dummy)
        {
            Contract.Requires(dummy != null); // Re-stipulate this contract, since it must be checked before the added contracts.]]></beforeSource>
<source><![CDATA[            Contract.Requires(dummy.GetType() == this.GetType());]]></source>
<afterSource><![CDATA[            Contract.Requires(dummy.PrimaryKey == null || (((VoterDO)dummy).PrimaryKey >= 101000001 && ((VoterDO)dummy).PrimaryKey <= 3012999999));

            VoterDO voterDummy = dummy as VoterDO;]]></afterSource>
</frame>
<frame value="  at VoterDOTest.UpdateValues(VoterDO, IDataObject)" method="VoterDOTest.UpdateValues(VoterDO, IDataObject)" offset="2"><method assemblyName="DBComm.Tests" name="UpdateValues" token="6000007"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="2"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</method>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathAssumption><![CDATA[PollingStationDO s0 = new;
return dummy == (IDataObject)s0 && methodof(dummy.get_PrimaryKey) != methodof(VoterDO.get_PrimaryKey) && methodof(target.UpdateValues) == methodof(VoterDO.UpdateValues) && 
                                                                                                         primaryKey_nullu.hasValue == false && ((object)dummy).GetType() == ((object)target).GetType() && dummy != (IDataObject)null && target != (VoterDO)null && primaryKey_nullu.value < 101000001u;
]]></pathAssumption>
<pathCondition><![CDATA[PollingStationDO s0 = new;
return ((object)s0).GetType() != ((object)target).GetType();
]]></pathCondition>
</generatedTest>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<generatedTest id="7625ddbd-f9c7-435f-943e-147337facf5c" index="5" run="14" exceptionState="expected" status="expectedexception" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="UpdateValuesThrowsContractException596"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="41" atot="114"/>
<rcov name="asserts" dcov="0" dtot="0" acov="2" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=&quot;&quot;,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="dummy">new VoterDO{PrimaryKey=null,PollingStationId=2,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[try
{
  VoterDO voterDO;
  VoterDO voterDO1;
  voterDO = PexInvariant.CreateInstance<VoterDO>();
  PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
  PexInvariant.SetField<EntityRef<PollingStationDO>>
      ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
  PexInvariant.SetField<uint?>
      ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
  PexInvariant.SetField<string>
      ((object)voterDO, "<Name>k__BackingField", (string)null);
  PexInvariant.SetField<string>((object)voterDO, "<Address>k__BackingField", "");
  PexInvariant.SetField<string>
      ((object)voterDO, "<City>k__BackingField", (string)null);
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
  PexInvariant.CheckInvariant((object)voterDO);
  voterDO1 = PexInvariant.CreateInstance<VoterDO>();
  PexInvariant.SetField<uint?>((object)voterDO1, "primaryKey", default(uint?));
  PexInvariant.SetField<EntityRef<PollingStationDO>>
      ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
  PexInvariant.SetField<uint?>
      ((object)voterDO1, "<PollingStationId>k__BackingField", new uint?(2u));
  PexInvariant.SetField<string>
      ((object)voterDO1, "<Name>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO1, "<Address>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO1, "<City>k__BackingField", (string)null);
  PexInvariant.SetField<bool?>
      ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
  PexInvariant.SetField<bool?>
      ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
  PexInvariant.CheckInvariant((object)voterDO1);
  this.UpdateValues(voterDO, (IDataObject)voterDO1);
  throw 
    new AssertFailedException("expected an exception of type ContractException");
}
catch(Exception ex)
{
  if (!PexContract.IsContractException(ex))
    throw ex;
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;System;Microsoft.Pex.Framework.Generated;Microsoft.Pex.Engine.Exceptions"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void UpdateValuesThrowsContractException596()
{
    try
    {
      VoterDO voterDO;
      VoterDO voterDO1;
      voterDO = PexInvariant.CreateInstance<VoterDO>();
      PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
      PexInvariant.SetField<EntityRef<PollingStationDO>>
          ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
      PexInvariant.SetField<uint?>
          ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
      PexInvariant.SetField<string>
          ((object)voterDO, "<Name>k__BackingField", (string)null);
      PexInvariant.SetField<string>((object)voterDO, "<Address>k__BackingField", "");
      PexInvariant.SetField<string>
          ((object)voterDO, "<City>k__BackingField", (string)null);
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
      PexInvariant.CheckInvariant((object)voterDO);
      voterDO1 = PexInvariant.CreateInstance<VoterDO>();
      PexInvariant.SetField<uint?>((object)voterDO1, "primaryKey", default(uint?));
      PexInvariant.SetField<EntityRef<PollingStationDO>>
          ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
      PexInvariant.SetField<uint?>
          ((object)voterDO1, "<PollingStationId>k__BackingField", new uint?(2u));
      PexInvariant.SetField<string>
          ((object)voterDO1, "<Name>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO1, "<Address>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO1, "<City>k__BackingField", (string)null);
      PexInvariant.SetField<bool?>
          ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
      PexInvariant.SetField<bool?>
          ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
      PexInvariant.CheckInvariant((object)voterDO1);
      this.UpdateValues(voterDO, (IDataObject)voterDO1);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<exceptionChain><exception typeDisplayName="ContractException" source="DBComm"><message><![CDATA[Precondition failed: value >= 101000001 && value <= 3112999999]]></message>
<type spec="Class"><definition assemblyName="DBComm" name="ContractException" token="2000021"><declaringType assemblyName="DBComm" name="__ContractsRuntime" token="2000014" namespace="System.Diagnostics.Contracts"/>
</definition>
</type>
<stackTrace><frame value="  at VoterDO.set_PrimaryKey(Nullable`1&lt;UInt32&gt;) in C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs(81)" method="VoterDO.set_PrimaryKey(Nullable`1&lt;UInt32&gt;)" offset="104" file="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" line="81"><method assemblyName="DBComm" name="set_PrimaryKey" token="6000041"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="value" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Nullable`1" token="200034c" namespace="System"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="UInt32" token="2000181" namespace="System"/>
</genericTypeArgument>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            private set
            {]]></beforeSource>
<source><![CDATA[                Contract.Requires(value >= 101000001 && value <= 3112999999);]]></source>
<afterSource><![CDATA[                this.primaryKey = value;
            }
        }]]></afterSource>
</frame>
<frame value="  at VoterDO.UpdateValues(IDataObject) in C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs(198)" method="VoterDO.UpdateValues(IDataObject)" offset="403" file="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" line="198"><method assemblyName="DBComm" name="UpdateValues" token="6000053"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="1"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            Contract.Assert(voterDummy != null);

            this.PollingStationId = voterDummy.PollingStationId ?? this.PollingStationId;]]></beforeSource>
<source><![CDATA[            this.PrimaryKey = voterDummy.PrimaryKey ?? this.PrimaryKey;]]></source>
<afterSource><![CDATA[            this.Name = voterDummy.Name ?? this.Name;
            this.City = voterDummy.City ?? this.City;
            this.Address = voterDummy.Address ?? this.Address;]]></afterSource>
</frame>
<frame value="  at VoterDOTest.UpdateValues(VoterDO, IDataObject)" method="VoterDOTest.UpdateValues(VoterDO, IDataObject)" offset="2"><method assemblyName="DBComm.Tests" name="UpdateValues" token="6000007"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="2"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</method>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathAssumption><![CDATA[VoterDO s0 = new;
VoterDO s2 = new;
uint? s1 = dummy == (IDataObject)s2 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
return dummy == (IDataObject)s0 && s1.hasValue != false && methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && methodof(target.UpdateValues) == methodof(VoterDO.UpdateValues) && 
                                                                                                                                 primaryKey_nullu.hasValue == false && ((object)dummy).GetType() == ((object)target).GetType() && dummy != (IDataObject)null && target != (VoterDO)null && primaryKey_nullu.value < 101000001u;
]]></pathAssumption>
<pathCondition><![CDATA[VoterDO s0 = new;
VoterDO s2 = new;
uint? s1 = target == s0 ? primaryKey_nullu : target == s2 ? primaryKey_nullu : target.primaryKey;
sbyte s3 = s0 == target ? (sbyte)1 : (sbyte)0;
return primaryKey_nullu.value < 101000001u && 
       ((object)s0).GetType() == ((object)target).GetType() && <PollingStationId>k__BackingField_nullu1.hasValue != false && s1.value < 101000001u && s3 == (sbyte)0 && primaryKey_nullu.hasValue == false;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:49Z" category="coverage" message="coverage increased from 39 to 41 blocks (+2) after flipping DBComm.DBComm.DO.VoterDO.UpdateValues at 0x0146"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<generatedTest id="3dccbfbc-442d-452e-b1ee-2ef34e375a65" index="6" run="16" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="UpdateValues889"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="81" dtot="21" acov="122" atot="135"/>
<rcov name="asserts" dcov="0" dtot="0" acov="2" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="dummy">new VoterDO{PrimaryKey=268780865,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=268780865,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=268780865,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=268780865,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[VoterDO voterDO;
VoterDO voterDO1;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
voterDO1 = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>
    ((object)voterDO1, "primaryKey", new uint?(268780865u));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO1, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO1, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO1, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO1);
this.UpdateValues(voterDO, (IDataObject)voterDO1);
Assert.IsNotNull((object)voterDO);
Assert.IsNotNull((object)(voterDO.PrimaryKey));
Assert.AreEqual<uint>(268780865u, (uint)((object)(voterDO.PrimaryKey)));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void UpdateValues889()
{
    VoterDO voterDO;
    VoterDO voterDO1;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    voterDO1 = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>
        ((object)voterDO1, "primaryKey", new uint?(268780865u));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO1, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO1, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO1, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO1);
    this.UpdateValues(voterDO, (IDataObject)voterDO1);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNotNull((object)(voterDO.PrimaryKey));
    Assert.AreEqual<uint>(268780865u, (uint)((object)(voterDO.PrimaryKey)));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathAssumption><![CDATA[IDataObject s0 = dummy == (IDataObject)null || dummy is VoterDO ? dummy : (IDataObject)null;
VoterDO s1 = new;
VoterDO s4 = new;
bool s3 = s0 == (IDataObject)s4 ? false : ((VoterDO)s0).$evaluatingInvariant$;
bool s2 = s0 == (IDataObject)target ? true : s3;
uint? s5 = dummy == (IDataObject)s4 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
return (dummy == (IDataObject)s1 || s0 == (IDataObject)s1) && s2 == false && s5.hasValue == false && 
                                                                             methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && methodof(target.UpdateValues) == methodof(VoterDO.UpdateValues) && primaryKey_nullu.hasValue == false && 
                                                                                                                                                                                                                      s0 != (IDataObject)null && ((object)dummy).GetType() == ((object)target).GetType() && dummy != (IDataObject)null && target != (VoterDO)null && primaryKey_nullu.value < 101000001u;
]]></pathAssumption>
<pathCondition><![CDATA[VoterDO s2 = new;
VoterDO s3 = new;
uint? s1 = dummy == (IDataObject)s2 ? primaryKey_nullu : dummy == (IDataObject)s3 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
uint? s0 = s1;
bool? s4 = dummy == (IDataObject)s2 ? <CardPrinted>k__BackingField_nullb : dummy == (IDataObject)s3 ? <CardPrinted>k__BackingField_nullb : ((VoterDO)dummy).CardPrinted;
bool? s5 = dummy == (IDataObject)s2 ? <Voted>k__BackingField_nullb1 : dummy == (IDataObject)s3 ? <Voted>k__BackingField_nullb1 : ((VoterDO)dummy).Voted;
bool s7 = dummy == (IDataObject)s2 ? false : dummy == (IDataObject)s3 ? false : ((VoterDO)dummy).$evaluatingInvariant$;
bool s6 = dummy == (IDataObject)target ? true : s7;
uint? s8 = dummy == (IDataObject)s2 ? <PollingStationId>k__BackingField_nullu1 : dummy == (IDataObject)s3 ? <PollingStationId>k__BackingField_nullu1 : ((VoterDO)dummy).PollingStationId;
string s9 = dummy == (IDataObject)s2 ? <Name>k__BackingField_s : dummy == (IDataObject)s3 ? <Name>k__BackingField_s : ((VoterDO)dummy).Name;
string s10 = dummy == (IDataObject)s2 ? <City>k__BackingField_s2 : dummy == (IDataObject)s3 ? <City>k__BackingField_s2 : ((VoterDO)dummy).City;
string s11 = dummy == (IDataObject)s2 ? <Address>k__BackingField_s1 : dummy == (IDataObject)s3 ? <Address>k__BackingField_s1 : ((VoterDO)dummy).Address;
bool s12 = target == s2 ? false : target == s3 ? false : target.$evaluatingInvariant$;
return 101000000u < primaryKey_nullu.value && primaryKey_nullu.hasValue != false && primaryKey_nullu.value < 3113000000u && s0.hasValue != false && (dummy == (IDataObject)null || dummy is VoterDO) && 
                                                                                                                                                    101000000u < s0.value && s0.value < 3013000000u && s4.hasValue != false && s5.hasValue != false && methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && 
                                                                                                                                                                                                                                                       s6 == false && s8.hasValue == false && s9 == (string)null && s10 == (string)null && s11 == (string)null && methodof(target.$InvariantMethod$) == methodof(VoterDO.$InvariantMethod$) && s12 == false;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:50Z" category="coverage" message="coverage increased from 41 to 122 blocks (+81) after flipping DBComm.DBComm.DO.VoterDO.$InvariantMethod$ at 0x0026"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<generatedTest id="28e25373-8c32-450d-aff0-a80b516629cf" index="7" run="17" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="UpdateValues741"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="122" atot="135"/>
<rcov name="asserts" dcov="0" dtot="0" acov="2" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="dummy">new VoterDO{PrimaryKey=302394113,PollingStationId=null,Name=null,Address=&quot;&quot;,City=null,CardPrinted=true,Voted=true,primaryKey=302394113,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=302394113,PollingStationId=null,Name=null,Address=&quot;&quot;,City=null,CardPrinted=true,Voted=true,primaryKey=302394113,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[VoterDO voterDO;
VoterDO voterDO1;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
voterDO1 = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>
    ((object)voterDO1, "primaryKey", new uint?(302394113u));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO1, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>((object)voterDO1, "<Address>k__BackingField", "");
PexInvariant.SetField<string>
    ((object)voterDO1, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO1);
this.UpdateValues(voterDO, (IDataObject)voterDO1);
Assert.IsNotNull((object)voterDO);
Assert.IsNotNull((object)(voterDO.PrimaryKey));
Assert.AreEqual<uint>(302394113u, (uint)((object)(voterDO.PrimaryKey)));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>("", voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void UpdateValues741()
{
    VoterDO voterDO;
    VoterDO voterDO1;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    voterDO1 = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>
        ((object)voterDO1, "primaryKey", new uint?(302394113u));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO1, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>((object)voterDO1, "<Address>k__BackingField", "");
    PexInvariant.SetField<string>
        ((object)voterDO1, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO1);
    this.UpdateValues(voterDO, (IDataObject)voterDO1);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNotNull((object)(voterDO.PrimaryKey));
    Assert.AreEqual<uint>(302394113u, (uint)((object)(voterDO.PrimaryKey)));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>("", voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathAssumption><![CDATA[IDataObject s0 = dummy == (IDataObject)null || dummy is VoterDO ? dummy : (IDataObject)null;
VoterDO s1 = new;
VoterDO s4 = new;
bool s3 = s0 == (IDataObject)s4 ? false : ((VoterDO)s0).$evaluatingInvariant$;
bool s2 = s0 == (IDataObject)target ? true : s3;
uint? s5 = dummy == (IDataObject)s4 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
return (dummy == (IDataObject)s1 || s0 == (IDataObject)s1) && s2 == false && s5.hasValue == false && 
                                                                             methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && methodof(target.UpdateValues) == methodof(VoterDO.UpdateValues) && primaryKey_nullu.hasValue == false && 
                                                                                                                                                                                                                      s0 != (IDataObject)null && ((object)dummy).GetType() == ((object)target).GetType() && dummy != (IDataObject)null && target != (VoterDO)null && primaryKey_nullu.value < 101000001u;
]]></pathAssumption>
<pathCondition><![CDATA[VoterDO s2 = new;
VoterDO s3 = new;
uint? s1 = dummy == (IDataObject)s2 ? primaryKey_nullu : dummy == (IDataObject)s3 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
uint? s0 = s1;
string s4 = dummy == (IDataObject)s2 ? <Address>k__BackingField_s1 : dummy == (IDataObject)s3 ? <Address>k__BackingField_s1 : ((VoterDO)dummy).Address;
bool? s5 = dummy == (IDataObject)s2 ? <CardPrinted>k__BackingField_nullb : dummy == (IDataObject)s3 ? <CardPrinted>k__BackingField_nullb : ((VoterDO)dummy).CardPrinted;
bool? s6 = dummy == (IDataObject)s2 ? <Voted>k__BackingField_nullb1 : dummy == (IDataObject)s3 ? <Voted>k__BackingField_nullb1 : ((VoterDO)dummy).Voted;
bool s8 = dummy == (IDataObject)s2 ? false : dummy == (IDataObject)s3 ? false : ((VoterDO)dummy).$evaluatingInvariant$;
bool s7 = dummy == (IDataObject)target ? true : s8;
uint? s9 = dummy == (IDataObject)s2 ? <PollingStationId>k__BackingField_nullu1 : dummy == (IDataObject)s3 ? <PollingStationId>k__BackingField_nullu1 : ((VoterDO)dummy).PollingStationId;
string s10 = dummy == (IDataObject)s2 ? <Name>k__BackingField_s : dummy == (IDataObject)s3 ? <Name>k__BackingField_s : ((VoterDO)dummy).Name;
string s11 = dummy == (IDataObject)s2 ? <City>k__BackingField_s2 : dummy == (IDataObject)s3 ? <City>k__BackingField_s2 : ((VoterDO)dummy).City;
bool s12 = target == s2 ? false : target == s3 ? false : target.$evaluatingInvariant$;
return 101000000u < primaryKey_nullu.value && primaryKey_nullu.hasValue != false && primaryKey_nullu.value < 3113000000u && s0.hasValue != false && (dummy == (IDataObject)null || dummy is VoterDO) && 
                                                                                                                                                    101000000u < s0.value && s0.value < 3013000000u && s4 != (string)null && s5.hasValue != false && s6.hasValue != false && methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && 
                                                                                                                                                                                                                                                                             s7 == false && s9.hasValue == false && s10 == (string)null && s11 == (string)null && methodof(target.$InvariantMethod$) == methodof(VoterDO.$InvariantMethod$) && s12 == false;
]]></pathCondition>
</generatedTest>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<generatedTest id="9d3a2d2e-edca-4314-84e1-f1e0cf748d23" index="8" run="19" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="UpdateValues654"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="122" atot="135"/>
<rcov name="asserts" dcov="0" dtot="0" acov="2" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="dummy">new VoterDO{PrimaryKey=302394113,PollingStationId=null,Name=&quot;&quot;,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=302394113,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=302394113,PollingStationId=null,Name=&quot;&quot;,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=302394113,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[VoterDO voterDO;
VoterDO voterDO1;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
voterDO1 = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>
    ((object)voterDO1, "primaryKey", new uint?(302394113u));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>((object)voterDO1, "<Name>k__BackingField", "");
PexInvariant.SetField<string>
    ((object)voterDO1, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO1, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO1);
this.UpdateValues(voterDO, (IDataObject)voterDO1);
Assert.IsNotNull((object)voterDO);
Assert.IsNotNull((object)(voterDO.PrimaryKey));
Assert.AreEqual<uint>(302394113u, (uint)((object)(voterDO.PrimaryKey)));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>("", voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void UpdateValues654()
{
    VoterDO voterDO;
    VoterDO voterDO1;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    voterDO1 = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>
        ((object)voterDO1, "primaryKey", new uint?(302394113u));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>((object)voterDO1, "<Name>k__BackingField", "");
    PexInvariant.SetField<string>
        ((object)voterDO1, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO1, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO1);
    this.UpdateValues(voterDO, (IDataObject)voterDO1);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNotNull((object)(voterDO.PrimaryKey));
    Assert.AreEqual<uint>(302394113u, (uint)((object)(voterDO.PrimaryKey)));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>("", voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathAssumption><![CDATA[IDataObject s0 = dummy == (IDataObject)null || dummy is VoterDO ? dummy : (IDataObject)null;
VoterDO s1 = new;
VoterDO s4 = new;
bool s3 = s0 == (IDataObject)s4 ? false : ((VoterDO)s0).$evaluatingInvariant$;
bool s2 = s0 == (IDataObject)target ? true : s3;
uint? s5 = dummy == (IDataObject)s4 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
return (dummy == (IDataObject)s1 || s0 == (IDataObject)s1) && s2 == false && s5.hasValue == false && 
                                                                             methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && methodof(target.UpdateValues) == methodof(VoterDO.UpdateValues) && primaryKey_nullu.hasValue == false && 
                                                                                                                                                                                                                      s0 != (IDataObject)null && ((object)dummy).GetType() == ((object)target).GetType() && dummy != (IDataObject)null && target != (VoterDO)null && primaryKey_nullu.value < 101000001u;
]]></pathAssumption>
<pathCondition><![CDATA[VoterDO s2 = new;
VoterDO s3 = new;
uint? s1 = dummy == (IDataObject)s2 ? primaryKey_nullu : dummy == (IDataObject)s3 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
uint? s0 = s1;
string s4 = dummy == (IDataObject)s2 ? <Name>k__BackingField_s : dummy == (IDataObject)s3 ? <Name>k__BackingField_s : ((VoterDO)dummy).Name;
bool? s5 = dummy == (IDataObject)s2 ? <CardPrinted>k__BackingField_nullb : dummy == (IDataObject)s3 ? <CardPrinted>k__BackingField_nullb : ((VoterDO)dummy).CardPrinted;
bool? s6 = dummy == (IDataObject)s2 ? <Voted>k__BackingField_nullb1 : dummy == (IDataObject)s3 ? <Voted>k__BackingField_nullb1 : ((VoterDO)dummy).Voted;
bool s8 = dummy == (IDataObject)s2 ? false : dummy == (IDataObject)s3 ? false : ((VoterDO)dummy).$evaluatingInvariant$;
bool s7 = dummy == (IDataObject)target ? true : s8;
uint? s9 = dummy == (IDataObject)s2 ? <PollingStationId>k__BackingField_nullu1 : dummy == (IDataObject)s3 ? <PollingStationId>k__BackingField_nullu1 : ((VoterDO)dummy).PollingStationId;
string s10 = dummy == (IDataObject)s2 ? <City>k__BackingField_s2 : dummy == (IDataObject)s3 ? <City>k__BackingField_s2 : ((VoterDO)dummy).City;
string s11 = dummy == (IDataObject)s2 ? <Address>k__BackingField_s1 : dummy == (IDataObject)s3 ? <Address>k__BackingField_s1 : ((VoterDO)dummy).Address;
bool s12 = target == s2 ? false : target == s3 ? false : target.$evaluatingInvariant$;
return 101000000u < primaryKey_nullu.value && primaryKey_nullu.hasValue != false && primaryKey_nullu.value < 3113000000u && s0.hasValue != false && (dummy == (IDataObject)null || dummy is VoterDO) && 
                                                                                                                                                    101000000u < s0.value && s0.value < 3013000000u && s4 != (string)null && s5.hasValue != false && s6.hasValue != false && methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && 
                                                                                                                                                                                                                                                                             s7 == false && s9.hasValue == false && s10 == (string)null && s11 == (string)null && methodof(target.$InvariantMethod$) == methodof(VoterDO.$InvariantMethod$) && s12 == false;
]]></pathCondition>
</generatedTest>
<test name="UpdateValues" state="success" duration="0,01"/>
<generatedTest id="4c1154fc-5a06-4647-a063-acc180823a59" index="9" run="20" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="UpdateValues376"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="122" atot="135"/>
<rcov name="asserts" dcov="0" dtot="0" acov="2" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="dummy">new VoterDO{PrimaryKey=302394113,PollingStationId=null,Name=null,Address=null,City=&quot;&quot;,CardPrinted=true,Voted=true,primaryKey=302394113,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=302394113,PollingStationId=null,Name=null,Address=null,City=&quot;&quot;,CardPrinted=true,Voted=true,primaryKey=302394113,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[VoterDO voterDO;
VoterDO voterDO1;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
voterDO1 = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>
    ((object)voterDO1, "primaryKey", new uint?(302394113u));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO1, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO1, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>((object)voterDO1, "<City>k__BackingField", "");
PexInvariant.SetField<bool?>
    ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO1);
this.UpdateValues(voterDO, (IDataObject)voterDO1);
Assert.IsNotNull((object)voterDO);
Assert.IsNotNull((object)(voterDO.PrimaryKey));
Assert.AreEqual<uint>(302394113u, (uint)((object)(voterDO.PrimaryKey)));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>("", voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void UpdateValues376()
{
    VoterDO voterDO;
    VoterDO voterDO1;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    voterDO1 = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>
        ((object)voterDO1, "primaryKey", new uint?(302394113u));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO1, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO1, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>((object)voterDO1, "<City>k__BackingField", "");
    PexInvariant.SetField<bool?>
        ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO1);
    this.UpdateValues(voterDO, (IDataObject)voterDO1);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNotNull((object)(voterDO.PrimaryKey));
    Assert.AreEqual<uint>(302394113u, (uint)((object)(voterDO.PrimaryKey)));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>("", voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathAssumption><![CDATA[IDataObject s0 = dummy == (IDataObject)null || dummy is VoterDO ? dummy : (IDataObject)null;
VoterDO s1 = new;
VoterDO s4 = new;
bool s3 = s0 == (IDataObject)s4 ? false : ((VoterDO)s0).$evaluatingInvariant$;
bool s2 = s0 == (IDataObject)target ? true : s3;
uint? s5 = dummy == (IDataObject)s4 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
return (dummy == (IDataObject)s1 || s0 == (IDataObject)s1) && s2 == false && s5.hasValue == false && 
                                                                             methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && methodof(target.UpdateValues) == methodof(VoterDO.UpdateValues) && primaryKey_nullu.hasValue == false && 
                                                                                                                                                                                                                      s0 != (IDataObject)null && ((object)dummy).GetType() == ((object)target).GetType() && dummy != (IDataObject)null && target != (VoterDO)null && primaryKey_nullu.value < 101000001u;
]]></pathAssumption>
<pathCondition><![CDATA[VoterDO s2 = new;
VoterDO s3 = new;
uint? s1 = dummy == (IDataObject)s2 ? primaryKey_nullu : dummy == (IDataObject)s3 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
uint? s0 = s1;
string s4 = dummy == (IDataObject)s2 ? <City>k__BackingField_s2 : dummy == (IDataObject)s3 ? <City>k__BackingField_s2 : ((VoterDO)dummy).City;
bool? s5 = dummy == (IDataObject)s2 ? <CardPrinted>k__BackingField_nullb : dummy == (IDataObject)s3 ? <CardPrinted>k__BackingField_nullb : ((VoterDO)dummy).CardPrinted;
bool? s6 = dummy == (IDataObject)s2 ? <Voted>k__BackingField_nullb1 : dummy == (IDataObject)s3 ? <Voted>k__BackingField_nullb1 : ((VoterDO)dummy).Voted;
bool s8 = dummy == (IDataObject)s2 ? false : dummy == (IDataObject)s3 ? false : ((VoterDO)dummy).$evaluatingInvariant$;
bool s7 = dummy == (IDataObject)target ? true : s8;
uint? s9 = dummy == (IDataObject)s2 ? <PollingStationId>k__BackingField_nullu1 : dummy == (IDataObject)s3 ? <PollingStationId>k__BackingField_nullu1 : ((VoterDO)dummy).PollingStationId;
string s10 = dummy == (IDataObject)s2 ? <Name>k__BackingField_s : dummy == (IDataObject)s3 ? <Name>k__BackingField_s : ((VoterDO)dummy).Name;
string s11 = dummy == (IDataObject)s2 ? <Address>k__BackingField_s1 : dummy == (IDataObject)s3 ? <Address>k__BackingField_s1 : ((VoterDO)dummy).Address;
bool s12 = target == s2 ? false : target == s3 ? false : target.$evaluatingInvariant$;
return 101000000u < primaryKey_nullu.value && primaryKey_nullu.hasValue != false && primaryKey_nullu.value < 3113000000u && s0.hasValue != false && (dummy == (IDataObject)null || dummy is VoterDO) && 
                                                                                                                                                    101000000u < s0.value && s0.value < 3013000000u && s4 != (string)null && s5.hasValue != false && s6.hasValue != false && methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && 
                                                                                                                                                                                                                                                                             s7 == false && s9.hasValue == false && s10 == (string)null && s11 == (string)null && methodof(target.$InvariantMethod$) == methodof(VoterDO.$InvariantMethod$) && s12 == false;
]]></pathCondition>
</generatedTest>
<test name="UpdateValues" state="success" duration="0,00"/>
<generatedTest id="8977653b-0907-4640-a6b0-89505b33d5de" index="10" run="21" exceptionState="expected" status="expectedexception" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="UpdateValuesThrowsContractException987"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="1" dtot="0" acov="123" atot="135"/>
<rcov name="asserts" dcov="0" dtot="0" acov="2" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="dummy">new VoterDO{PrimaryKey=3046785860,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=3046785860,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[try
{
  VoterDO voterDO;
  VoterDO voterDO1;
  voterDO = PexInvariant.CreateInstance<VoterDO>();
  PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
  PexInvariant.SetField<EntityRef<PollingStationDO>>
      ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
  PexInvariant.SetField<uint?>
      ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
  PexInvariant.SetField<string>
      ((object)voterDO, "<Name>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO, "<Address>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO, "<City>k__BackingField", (string)null);
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
  PexInvariant.SetField<bool?>
      ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
  PexInvariant.CheckInvariant((object)voterDO);
  voterDO1 = PexInvariant.CreateInstance<VoterDO>();
  PexInvariant.SetField<uint?>
      ((object)voterDO1, "primaryKey", new uint?(3046785860u));
  PexInvariant.SetField<EntityRef<PollingStationDO>>
      ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
  PexInvariant.SetField<uint?>
      ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
  PexInvariant.SetField<string>
      ((object)voterDO1, "<Name>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO1, "<Address>k__BackingField", (string)null);
  PexInvariant.SetField<string>
      ((object)voterDO1, "<City>k__BackingField", (string)null);
  PexInvariant.SetField<bool?>
      ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
  PexInvariant.SetField<bool?>
      ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
  PexInvariant.CheckInvariant((object)voterDO1);
  this.UpdateValues(voterDO, (IDataObject)voterDO1);
  throw 
    new AssertFailedException("expected an exception of type ContractException");
}
catch(Exception ex)
{
  if (!PexContract.IsContractException(ex))
    throw ex;
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;System;Microsoft.Pex.Framework.Generated;Microsoft.Pex.Engine.Exceptions"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void UpdateValuesThrowsContractException987()
{
    try
    {
      VoterDO voterDO;
      VoterDO voterDO1;
      voterDO = PexInvariant.CreateInstance<VoterDO>();
      PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
      PexInvariant.SetField<EntityRef<PollingStationDO>>
          ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
      PexInvariant.SetField<uint?>
          ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
      PexInvariant.SetField<string>
          ((object)voterDO, "<Name>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO, "<Address>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO, "<City>k__BackingField", (string)null);
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
      PexInvariant.SetField<bool?>
          ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
      PexInvariant.CheckInvariant((object)voterDO);
      voterDO1 = PexInvariant.CreateInstance<VoterDO>();
      PexInvariant.SetField<uint?>
          ((object)voterDO1, "primaryKey", new uint?(3046785860u));
      PexInvariant.SetField<EntityRef<PollingStationDO>>
          ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
      PexInvariant.SetField<uint?>
          ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
      PexInvariant.SetField<string>
          ((object)voterDO1, "<Name>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO1, "<Address>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)voterDO1, "<City>k__BackingField", (string)null);
      PexInvariant.SetField<bool?>
          ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
      PexInvariant.SetField<bool?>
          ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
      PexInvariant.CheckInvariant((object)voterDO1);
      this.UpdateValues(voterDO, (IDataObject)voterDO1);
      throw 
        new AssertFailedException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<exceptionChain><exception typeDisplayName="ContractException" source="DBComm"><message><![CDATA[Precondition failed: dummy.PrimaryKey == null || (((VoterDO)dummy).PrimaryKey >= 101000001 && ((VoterDO)dummy).PrimaryKey <= 3012999999)]]></message>
<type spec="Class"><definition assemblyName="DBComm" name="ContractException" token="2000021"><declaringType assemblyName="DBComm" name="__ContractsRuntime" token="2000014" namespace="System.Diagnostics.Contracts"/>
</definition>
</type>
<stackTrace><frame value="  at VoterDO.UpdateValues(IDataObject) in C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs(192)" method="VoterDO.UpdateValues(IDataObject)" offset="197" file="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\DBComm\DO\VoterDO.cs" line="192"><method assemblyName="DBComm" name="UpdateValues" token="6000053"><declaringType assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="1"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        {
            Contract.Requires(dummy != null); // Re-stipulate this contract, since it must be checked before the added contracts.
            Contract.Requires(dummy.GetType() == this.GetType());]]></beforeSource>
<source><![CDATA[            Contract.Requires(dummy.PrimaryKey == null || (((VoterDO)dummy).PrimaryKey >= 101000001 && ((VoterDO)dummy).PrimaryKey <= 3012999999));]]></source>
<afterSource><![CDATA[
            VoterDO voterDummy = dummy as VoterDO;
            Contract.Assert(voterDummy != null);]]></afterSource>
</frame>
<frame value="  at VoterDOTest.UpdateValues(VoterDO, IDataObject)" method="VoterDOTest.UpdateValues(VoterDO, IDataObject)" offset="2"><method assemblyName="DBComm.Tests" name="UpdateValues" token="6000007"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="2"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</method>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathAssumption><![CDATA[IDataObject s0 = dummy == (IDataObject)null || dummy is VoterDO ? dummy : (IDataObject)null;
VoterDO s1 = new;
VoterDO s4 = new;
bool s3 = s0 == (IDataObject)s4 ? false : ((VoterDO)s0).$evaluatingInvariant$;
bool s2 = s0 == (IDataObject)target ? true : s3;
uint? s5 = dummy == (IDataObject)s4 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
return (dummy == (IDataObject)s1 || s0 == (IDataObject)s1) && s2 == false && s5.hasValue == false && 
                                                                             methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && methodof(target.UpdateValues) == methodof(VoterDO.UpdateValues) && primaryKey_nullu.hasValue == false && 
                                                                                                                                                                                                                      s0 != (IDataObject)null && ((object)dummy).GetType() == ((object)target).GetType() && dummy != (IDataObject)null && target != (VoterDO)null && primaryKey_nullu.value < 101000001u;
]]></pathAssumption>
<pathCondition><![CDATA[VoterDO s2 = new;
VoterDO s3 = new;
uint? s1 = dummy == (IDataObject)s2 ? primaryKey_nullu : dummy == (IDataObject)s3 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
uint? s0 = s1;
return 101000000u < primaryKey_nullu.value && primaryKey_nullu.hasValue != false && primaryKey_nullu.value < 3113000000u && 
                                                                                    s0.hasValue != false && (dummy == (IDataObject)null || dummy is VoterDO) && 3012999999u < s0.value && methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey);
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:50Z" category="coverage" message="coverage increased from 122 to 123 blocks (+1) after flipping DBComm.DBComm.DO.VoterDO.UpdateValues at 0x00a1"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<generatedTest id="cd848a1f-7908-44bd-8a83-c3aa08941ec8" index="11" run="22" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="UpdateValues617"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="125" atot="135"/>
<rcov name="asserts" dcov="0" dtot="0" acov="2" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=&quot;&quot;,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="dummy">new VoterDO{PrimaryKey=302394113,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=null,Voted=true,primaryKey=302394113,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=302394113,PollingStationId=null,Name=null,Address=&quot;&quot;,City=null,CardPrinted=true,Voted=true,primaryKey=302394113,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[VoterDO voterDO;
VoterDO voterDO1;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>((object)voterDO, "<Address>k__BackingField", "");
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
voterDO1 = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>
    ((object)voterDO1, "primaryKey", new uint?(302394113u));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO1, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO1, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO1, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO1, "<CardPrinted>k__BackingField", default(bool?));
PexInvariant.SetField<bool?>
    ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO1);
this.UpdateValues(voterDO, (IDataObject)voterDO1);
Assert.IsNotNull((object)voterDO);
Assert.IsNotNull((object)(voterDO.PrimaryKey));
Assert.AreEqual<uint>(302394113u, (uint)((object)(voterDO.PrimaryKey)));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>("", voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void UpdateValues617()
{
    VoterDO voterDO;
    VoterDO voterDO1;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>((object)voterDO, "<Address>k__BackingField", "");
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    voterDO1 = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>
        ((object)voterDO1, "primaryKey", new uint?(302394113u));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO1, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO1, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO1, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO1, "<CardPrinted>k__BackingField", default(bool?));
    PexInvariant.SetField<bool?>
        ((object)voterDO1, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO1);
    this.UpdateValues(voterDO, (IDataObject)voterDO1);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNotNull((object)(voterDO.PrimaryKey));
    Assert.AreEqual<uint>(302394113u, (uint)((object)(voterDO.PrimaryKey)));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>("", voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathAssumption><![CDATA[IDataObject s0 = dummy == (IDataObject)null || dummy is VoterDO ? dummy : (IDataObject)null;
VoterDO s1 = new;
VoterDO s4 = new;
bool s3 = s0 == (IDataObject)s4 ? false : ((VoterDO)s0).$evaluatingInvariant$;
bool s2 = s0 == (IDataObject)target ? true : s3;
uint? s5 = dummy == (IDataObject)s4 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
return (dummy == (IDataObject)s1 || s0 == (IDataObject)s1) && s2 == false && s5.hasValue == false && 
                                                                             methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && methodof(target.UpdateValues) == methodof(VoterDO.UpdateValues) && primaryKey_nullu.hasValue == false && 
                                                                                                                                                                                                                      s0 != (IDataObject)null && ((object)dummy).GetType() == ((object)target).GetType() && dummy != (IDataObject)null && target != (VoterDO)null && primaryKey_nullu.value < 101000001u;
]]></pathAssumption>
<pathCondition><![CDATA[VoterDO s2 = new;
VoterDO s3 = new;
uint? s1 = dummy == (IDataObject)s2 ? primaryKey_nullu : dummy == (IDataObject)s3 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
uint? s0 = s1;
bool? s4 = dummy == (IDataObject)s2 ? <Voted>k__BackingField_nullb1 : dummy == (IDataObject)s3 ? <Voted>k__BackingField_nullb1 : ((VoterDO)dummy).Voted;
bool s6 = dummy == (IDataObject)s2 ? false : dummy == (IDataObject)s3 ? false : ((VoterDO)dummy).$evaluatingInvariant$;
bool s5 = dummy == (IDataObject)target ? true : s6;
uint? s7 = dummy == (IDataObject)s2 ? <PollingStationId>k__BackingField_nullu1 : dummy == (IDataObject)s3 ? <PollingStationId>k__BackingField_nullu1 : ((VoterDO)dummy).PollingStationId;
string s8 = dummy == (IDataObject)s2 ? <Name>k__BackingField_s : dummy == (IDataObject)s3 ? <Name>k__BackingField_s : ((VoterDO)dummy).Name;
string s9 = dummy == (IDataObject)s2 ? <City>k__BackingField_s2 : dummy == (IDataObject)s3 ? <City>k__BackingField_s2 : ((VoterDO)dummy).City;
string s10 = dummy == (IDataObject)s2 ? <Address>k__BackingField_s1 : dummy == (IDataObject)s3 ? <Address>k__BackingField_s1 : ((VoterDO)dummy).Address;
bool? s11 = dummy == (IDataObject)s2 ? <CardPrinted>k__BackingField_nullb : dummy == (IDataObject)s3 ? <CardPrinted>k__BackingField_nullb : ((VoterDO)dummy).CardPrinted;
bool s12 = target == s2 ? false : target == s3 ? false : target.$evaluatingInvariant$;
return 101000000u < primaryKey_nullu.value && primaryKey_nullu.hasValue != false && primaryKey_nullu.value < 3113000000u && s0.hasValue != false && (dummy == (IDataObject)null || dummy is VoterDO) && 
                                                                                                                                                    101000000u < s0.value && s0.value < 3013000000u && s4.hasValue != false && methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && s5 == false && s7.hasValue == false && 
                                                                                                                                                                                                                                                                                                                    s8 == (string)null && s9 == (string)null && s10 == (string)null && s11.hasValue == false && methodof(target.$InvariantMethod$) == methodof(VoterDO.$InvariantMethod$) && s12 == false;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:50Z" category="coverage" message="coverage increased from 123 to 125 blocks (+2) after flipping DBComm.DBComm.DO.VoterDO.UpdateValues at 0x01f6"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<generatedTest id="0b92cd6a-833a-47b8-931b-146d63be2226" index="12" run="23" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true" assemblyName="DBComm.Tests" name="UpdateValues658"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="ffffffff" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<rcov name="Block" dcov="2" dtot="0" acov="127" atot="135"/>
<rcov name="asserts" dcov="0" dtot="0" acov="2" atot="2"/>
<value name="target">new VoterDO{PrimaryKey=null,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=null,_pollingStation=new EntityRef{}}</value>
<value name="dummy">new VoterDO{PrimaryKey=302394113,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=null,primaryKey=302394113,_pollingStation=new EntityRef{}}</value>
<value name="result(target)">new VoterDO{PrimaryKey=302394113,PollingStationId=null,Name=null,Address=null,City=null,CardPrinted=true,Voted=true,primaryKey=302394113,_pollingStation=new EntityRef{}}</value>
<code><![CDATA[VoterDO voterDO;
VoterDO voterDO1;
voterDO = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
PexInvariant.CheckInvariant((object)voterDO);
voterDO1 = PexInvariant.CreateInstance<VoterDO>();
PexInvariant.SetField<uint?>
    ((object)voterDO1, "primaryKey", new uint?(302394113u));
PexInvariant.SetField<EntityRef<PollingStationDO>>
    ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
PexInvariant.SetField<uint?>
    ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
PexInvariant.SetField<string>
    ((object)voterDO1, "<Name>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO1, "<Address>k__BackingField", (string)null);
PexInvariant.SetField<string>
    ((object)voterDO1, "<City>k__BackingField", (string)null);
PexInvariant.SetField<bool?>
    ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
PexInvariant.SetField<bool?>
    ((object)voterDO1, "<Voted>k__BackingField", default(bool?));
PexInvariant.CheckInvariant((object)voterDO1);
this.UpdateValues(voterDO, (IDataObject)voterDO1);
Assert.IsNotNull((object)voterDO);
Assert.IsNotNull((object)(voterDO.PrimaryKey));
Assert.AreEqual<uint>(302394113u, (uint)((object)(voterDO.PrimaryKey)));
Assert.IsNull((object)(voterDO.PollingStationId));
Assert.AreEqual<string>((string)null, voterDO.Name);
Assert.AreEqual<string>((string)null, voterDO.Address);
Assert.AreEqual<string>((string)null, voterDO.City);
Assert.IsNotNull((object)(voterDO.CardPrinted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
Assert.IsNotNull((object)(voterDO.Voted));
Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Explorable;System.Data.Linq;Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(VoterDOTest))]
public void UpdateValues658()
{
    VoterDO voterDO;
    VoterDO voterDO1;
    voterDO = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>((object)voterDO, "primaryKey", default(uint?));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO, "<Voted>k__BackingField", new bool?(true));
    PexInvariant.CheckInvariant((object)voterDO);
    voterDO1 = PexInvariant.CreateInstance<VoterDO>();
    PexInvariant.SetField<uint?>
        ((object)voterDO1, "primaryKey", new uint?(302394113u));
    PexInvariant.SetField<EntityRef<PollingStationDO>>
        ((object)voterDO1, "_pollingStation", default(EntityRef<PollingStationDO>));
    PexInvariant.SetField<uint?>
        ((object)voterDO1, "<PollingStationId>k__BackingField", default(uint?));
    PexInvariant.SetField<string>
        ((object)voterDO1, "<Name>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO1, "<Address>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)voterDO1, "<City>k__BackingField", (string)null);
    PexInvariant.SetField<bool?>
        ((object)voterDO1, "<CardPrinted>k__BackingField", new bool?(true));
    PexInvariant.SetField<bool?>
        ((object)voterDO1, "<Voted>k__BackingField", default(bool?));
    PexInvariant.CheckInvariant((object)voterDO1);
    this.UpdateValues(voterDO, (IDataObject)voterDO1);
    Assert.IsNotNull((object)voterDO);
    Assert.IsNotNull((object)(voterDO.PrimaryKey));
    Assert.AreEqual<uint>(302394113u, (uint)((object)(voterDO.PrimaryKey)));
    Assert.IsNull((object)(voterDO.PollingStationId));
    Assert.AreEqual<string>((string)null, voterDO.Name);
    Assert.AreEqual<string>((string)null, voterDO.Address);
    Assert.AreEqual<string>((string)null, voterDO.City);
    Assert.IsNotNull((object)(voterDO.CardPrinted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.CardPrinted)));
    Assert.IsNotNull((object)(voterDO.Voted));
    Assert.AreEqual<bool>(true, (bool)((object)(voterDO.Voted)));
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="DBComm.Tests"/>
<reference name="DBComm" location="C:\Users\jmei\Dropbox\Programmering\Visual Studio\Projects\BDSA\DigitalVoterList\DBComm\bin\Debug\DBComm.exe"/>
<reference name="System.Data.Linq"/>
<pathAssumption><![CDATA[IDataObject s0 = dummy == (IDataObject)null || dummy is VoterDO ? dummy : (IDataObject)null;
VoterDO s1 = new;
VoterDO s4 = new;
bool s3 = s0 == (IDataObject)s4 ? false : ((VoterDO)s0).$evaluatingInvariant$;
bool s2 = s0 == (IDataObject)target ? true : s3;
uint? s5 = dummy == (IDataObject)s4 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
return (dummy == (IDataObject)s1 || s0 == (IDataObject)s1) && s2 == false && s5.hasValue == false && 
                                                                             methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && methodof(target.UpdateValues) == methodof(VoterDO.UpdateValues) && primaryKey_nullu.hasValue == false && 
                                                                                                                                                                                                                      s0 != (IDataObject)null && ((object)dummy).GetType() == ((object)target).GetType() && dummy != (IDataObject)null && target != (VoterDO)null && primaryKey_nullu.value < 101000001u;
]]></pathAssumption>
<pathCondition><![CDATA[VoterDO s2 = new;
VoterDO s3 = new;
uint? s1 = dummy == (IDataObject)s2 ? primaryKey_nullu : dummy == (IDataObject)s3 ? primaryKey_nullu : ((VoterDO)dummy).primaryKey;
uint? s0 = s1;
bool? s4 = dummy == (IDataObject)s2 ? <CardPrinted>k__BackingField_nullb : dummy == (IDataObject)s3 ? <CardPrinted>k__BackingField_nullb : ((VoterDO)dummy).CardPrinted;
bool s6 = dummy == (IDataObject)s2 ? false : dummy == (IDataObject)s3 ? false : ((VoterDO)dummy).$evaluatingInvariant$;
bool s5 = dummy == (IDataObject)target ? true : s6;
uint? s7 = dummy == (IDataObject)s2 ? <PollingStationId>k__BackingField_nullu1 : dummy == (IDataObject)s3 ? <PollingStationId>k__BackingField_nullu1 : ((VoterDO)dummy).PollingStationId;
string s8 = dummy == (IDataObject)s2 ? <Name>k__BackingField_s : dummy == (IDataObject)s3 ? <Name>k__BackingField_s : ((VoterDO)dummy).Name;
string s9 = dummy == (IDataObject)s2 ? <City>k__BackingField_s2 : dummy == (IDataObject)s3 ? <City>k__BackingField_s2 : ((VoterDO)dummy).City;
string s10 = dummy == (IDataObject)s2 ? <Address>k__BackingField_s1 : dummy == (IDataObject)s3 ? <Address>k__BackingField_s1 : ((VoterDO)dummy).Address;
bool? s11 = dummy == (IDataObject)s2 ? <Voted>k__BackingField_nullb1 : dummy == (IDataObject)s3 ? <Voted>k__BackingField_nullb1 : ((VoterDO)dummy).Voted;
bool s12 = target == s2 ? false : target == s3 ? false : target.$evaluatingInvariant$;
return 101000000u < primaryKey_nullu.value && primaryKey_nullu.hasValue != false && primaryKey_nullu.value < 3113000000u && s0.hasValue != false && (dummy == (IDataObject)null || dummy is VoterDO) && 
                                                                                                                                                    101000000u < s0.value && s0.value < 3013000000u && s4.hasValue != false && methodof(dummy.get_PrimaryKey) == methodof(VoterDO.get_PrimaryKey) && s5 == false && s7.hasValue == false && 
                                                                                                                                                                                                                                                                                                                    s8 == (string)null && s9 == (string)null && s10 == (string)null && s11.hasValue == false && methodof(target.$InvariantMethod$) == methodof(VoterDO.$InvariantMethod$) && s12 == false;
]]></pathCondition>
</generatedTest>
<log level="message" time="2011-12-13 13:49:50Z" category="coverage" message="coverage increased from 125 to 127 blocks (+2) after flipping DBComm.DBComm.DO.VoterDO.UpdateValues at 0x0227"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<log level="message" time="2011-12-13 13:49:55Z" category="progress" message="  250 constraint systems (58,40 % solved, 41,60 % proven unsatisfiable), flipping location VoterDO.$InvariantMethod$() at 0x0006 took 1s (31,57 %)"/>
<log level="message" time="2011-12-13 13:49:55Z" category="progress" message="   81 runs (93,83 % unique paths), 127/135 blocks covered"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,00"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<test name="UpdateValues" state="success" duration="0,01"/>
<boundary kind="maxrunswithoutnewtests" value="100" message="maximum runs without new tests reached"><update kind="AddOrUpdateAttributeCodeUpdate" name="Set MaxRunsWithoutNewTests=200" update="true"><attributeCtor><definition assemblyName="Microsoft.Pex.Framework" name=".ctor" token="6000e51"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Microsoft.Pex.Framework" name="PexMethodAttribute" token="200027f" namespace="Microsoft.Pex.Framework"/>
</type>
</parameter>
</definition>
</attributeCtor>
<argument><value kind="I4Expression" value="200"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</type>
</value>
<property><definition assemblyName="Microsoft.Pex.Framework" name="MaxRunsWithoutNewTests" token="17000346"><declaringType assemblyName="Microsoft.Pex.Framework" name="PexSettingsAttributeBase" token="2000273" namespace="Microsoft.Pex.Framework.Settings"/>
<propertyType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000fe" namespace="System"/>
</propertyType>
</definition>
</property>
</argument>
<target><method><definition assemblyName="DBComm.Tests" name="UpdateValues" token="6000007"><declaringType assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="DBComm.Tests" name="VoterDOTest" token="2000002" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="target" position="1"><type spec="Class"><definition assemblyName="DBComm" name="VoterDO" token="200000d" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
<parameter name="dummy" position="2"><type spec="Class"><definition assemblyName="DBComm" name="IDataObject" token="2000005" namespace="DBComm.DBComm.DO"/>
</type>
</parameter>
</definition>
</method>
</target>
</update>
</boundary>
<coverage domain="usercodeundertest" unit="block" covered="127" total="135" coveredRatio="0.94074074074074077"/>
<sourceCoverage xml="cov\e367\cov.xml" html="cov\e367\cov.html"/>
<result name="UpdateValues(VoterDO, IDataObject)" state="success" duration="8.48828001592115"/>
<duration start="2011-12-13 13:49:48Z" end="2011-12-13 13:49:57Z" seconds="8.4832294"/>
<trajectory><image src="fix\dbcommdbcommdovo634593845970724114.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="185" total="256" coveredRatio="0.72265625"/>
<sourceCoverage xml="cov\t530\cov.xml" html="cov\t530\cov.html"/>
<duration start="2011-12-13 13:49:43Z" end="2011-12-13 13:49:57Z" seconds="13.1320376"/>
</fixture>
<coverage domain="usercodeundertest" unit="block" covered="185" total="256" coveredRatio="0.72265625"/>
<sourceCoverage xml="cov\a39526333\cov.xml" html="cov\a39526333\cov.html"/>
<duration start="2011-12-13 13:49:43Z" end="2011-12-13 13:49:57Z" seconds="13.3192379"/>
<frameTreeRef exceptionCount="1"/>
</assembly>
<duration start="2011-12-13 13:49:42Z" end="2011-12-13 13:49:57Z" seconds="14.8636406"/>
<background/>
</pex>
